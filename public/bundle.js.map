{"version":3,"file":"bundle.js","mappings":";;;;;;;;;;;;;;;AAA8C;AAC/B,iCAAiC,uDAAc;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR,MAAM;AACN;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B,QAAQ;AACR;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;AC/FgC;AACG;AACH;AACjB;AACf;AACA;AACA;AACA;AACA,yBAAyB,oDAAK;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,uDAAS;AACrB;AACA;AACA,YAAY,+DAAiB;AAC7B;AACA;AACA;AACA,oDAAoD,uDAAS;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,4BAA4B,iEAAmB;AAC/C;AACA;AACA;AACA,YAAY,iEAAmB;AAC/B;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;;;;;;;;;;;;;;;;;;;;;ACpDyC;AACa;AACF;AACN;AACd;AACA;AACc;AAC/B,kCAAkC,uDAAc;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uHAAuH,wBAAwB;AAC/I;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,6DAAa;AACnC,uBAAuB,8DAAc;AACrC;AACA;AACA;AACA,QAAQ,sDAAc;AACtB;AACA;AACA,sBAAsB,0DAAK;AAC3B;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,YAAY,+DAAiB;AAC7B;AACA;AACA;AACA,oDAAoD,uDAAS;AAC7D,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,YAAY,+DAAiB;AAC7B,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,oBAAoB,uDAAS;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6DAA6D,uDAAS;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,IAAI,qDAAqD,OAAO;AAC/E;AACA,+CAA+C,KAAK;AACpD;AACA;AACA,aAAa;AACb;AACA;AACA;;;;;;;;;;;;;;;AClLe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;AChB+B;AACkB;AACd;AACpB,+BAA+B,+CAAM;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,uDAAS,CAAC,0DAAW;AAC9C,UAAU;AACV;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACjBmC;AACJ;AACgE;AACxD;AACxB,6BAA6B,+CAAM;AAClD;AACA;AACA;AACA;AACA;AACA,qBAAqB,uDAAS,CAAC,gDAAM;AACrC,6BAA6B,uDAAS;AACtC;AACA,wBAAwB,+DAAiB,CAAC,sDAAU;AACpD;AACA,oBAAoB,+DAAiB,CAAC,0DAAc;AACpD,oBAAoB,+DAAiB,CAAC,0DAAc;AACpD,qDAAqD,uDAAS;AAC9D;AACA,iCAAiC,0DAAc;AAC/C;AACA;AACA,kBAAkB,+DAAiB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,0DAAc;AAC/C;AACA;AACA;AACA,qCAAqC,0DAAc;AACnD;AACA;AACA,8BAA8B,uDAAS;AACvC;AACA,sBAAsB,+DAAiB,CAAC,mDAAO;AAC/C;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;AC/CmC;AACmB;AACvB;AACxB;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,8BAA8B;AAChB,6BAA6B,+CAAM;AAClD;AACA;AACA;AACA;AACA,0CAA0C,uDAAS;AACnD;AACA;AACA;AACA;AACA;AACA,YAAY,uDAAS;AACrB;AACA,8BAA8B,oEAAe;AAC7C;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACjCmC;AACJ;AACgC;AAChD,8BAA8B,+CAAM;AACnD;AACA;AACA;AACA;AACA;AACA,0BAA0B,yDAAU;AACpC;AACA,qCAAqC,EAAE,+DAAiB;AACxD,6BAA6B,4DAAa;AAC1C;AACA;AACA;AACA,qBAAqB,+DAAiB;AACtC,0BAA0B;AAC1B,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;AC3BmC;AACA;AACmB;AACvB;AACyB;AAClB;AACiC;AAChE;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,8BAA8B;AAChB,2BAA2B,+CAAM;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,8PAAqB;AAC3C;AACA,sBAAsB,oEAA2B,CAAC,0DAAY;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,wDAAY;AACjC;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,wDAAY;AACjC;AACA;AACA;AACA;AACA,kDAAkD,4DAAgB;AAClE;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,gDAAgD,8DAAS;AACzD;AACA;AACA,4BAA4B,0DAAY;AACxC;AACA,4BAA4B,uDAAS;AACrC,kCAAkC,8DAAgB;AAClD,iCAAiC,uDAAS;AAC1C,kCAAkC,8DAAgB;AAClD;AACA,sBAAsB,8PAAqB;AAC3C;AACA,sBAAsB,oEAA2B;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;AC3E+B;AACI;AACA;AACmB;AACM;AACrD;AACP;AACA;AACA;AACA;AACA,CAAC,kCAAkC;AAC5B;AACP;AACA;AACA;AACA,CAAC,4BAA4B;AACd,4BAA4B,+CAAM;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oEAAoE,oEAAe;AACnF;AACA,gBAAgB,uDAAS;AACzB;AACA,yEAAyE,oEAAe;AACxF;AACA,gBAAgB,uDAAS;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,uDAAS;AACrC;AACA;AACA;AACA,4DAA4D,6DAAM,0BAA0B,6DAAM;AAClG,4DAA4D,6DAAM,0BAA0B,6DAAM;AAClG;AACA;AACA;AACA,wBAAwB,OAAO;AAC/B,8BAA8B,uDAAS;AACvC;AACA,yBAAyB,8DAAgB;AACzC;AACA;AACA,gBAAgB,uDAAS;AACzB;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;AC7DmC;AACJ;AAC2C;AAC3D,iCAAiC,+CAAM;AACtD;AACA;AACA;AACA;AACA,yBAAyB,uDAAS,CAAC,0DAAS;AAC5C,yBAAyB,uDAAS,CAAC,2DAAU;AAC7C,0BAA0B,uDAAS,CAAC,4DAAW;AAC/C;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;ACfmC;AACA;AACA;AACmC;AACvC;AACY;AACA;AACqD;AACjF,2BAA2B,+CAAM;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,wDAAY;AAC7B,6BAA6B,0DAAY;AACzC;AACA,iBAAiB,wDAAY;AAC7B,6BAA6B,0DAAY;AACzC;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,gBAAgB;AACxC;AACA;AACA;AACA;AACA;AACA,yEAAyE,8DAAmB;AAC5F;AACA,qEAAqE,0DAAe;AACpF;AACA,gDAAgD,8DAAS,gBAAgB,mFAAkC;AAC3G;AACA;AACA,qCAAqC,uDAAS;AAC9C;AACA,cAAc,uDAAS;AACvB;AACA,QAAQ,8DAAgB;AACxB;AACA;AACA,cAAc,uDAAS;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,2DAAY;AACrC;AACA,4BAA4B,mEAAoB;AAChD;AACA;AACA,uBAAuB,+DAAiB;AACxC,yBAAyB,+DAAiB;AAC1C,0BAA0B;AAC1B,UAAU;AACV;AACA;AACA;AACA;AACA,+BAA+B,0DAAY;AAC3C,wBAAwB,oBAAoB;AAC5C,4CAA4C,uDAAS;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,+DAAiB,CAAC,gEAAiB;AACxE,4BAA4B,uDAAS;AACrC,qCAAqC,+DAAiB,CAAC,gEAAiB;AACxE,sBAAsB;AACtB;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD;AACxD,gBAAgB,uDAAS;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,gEAAkB;AAC9B,YAAY,kEAAoB;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACpI+B;AACI;AAC5B;AACP;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,oBAAoB;AACN,yBAAyB,+CAAM;AAC9C;AACA;AACA;AACA;AACA,oBAAoB,uDAAS;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxByD;AACM;AACU;AACV;AACF;AACA;AACE;AACI;AACF;AACb;AACpB;AACA;AACjB;AACf;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,qEAAU;AAClC,4BAA4B,uEAAc;AAC1C,gCAAgC,6EAAkB;AAClD,2BAA2B,wEAAa;AACxC,0BAA0B,uEAAY;AACtC,0BAA0B,uEAAY;AACtC,4BAA4B,uEAAc;AAC1C,8BAA8B,yEAAgB;AAC9C,6BAA6B,wEAAe;AAC5C;AACA;AACA;AACA,4BAA4B,qDAAoB;AAChD;AACA,SAAS;AACT,uCAAuC,wDAAS;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,8DAAe,CAAC,4DAAa;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,UAAU;AAC1C;AACA;AACA;;;;;;;;;;;;;;;;;AC5DmC;AACO;AAC3B;AACf;AACA;AACA;AACA;AACA,2BAA2B,wDAAU;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,yDAAO;AACzB;AACA;AACA;AACA;AACA;AACA,qCAAqC,wBAAwB,gEAAgE,iBAAiB;AAC9I;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;;;;;;;;;;;;;;;;;;;ACjC2D;AACM;AACJ;AACJ;AAC7B;AACb,6BAA6B,8CAAK;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,oEAAe;AACrC,wBAAwB,sEAAiB;AACzC,oBAAoB,kEAAa;AACjC,qBAAqB,mEAAc;AACnC;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;ACpBmC;AACqB;AACQ;AACJ;AACN;AAC1B;AACb,4BAA4B,8CAAK;AAChD;AACA;AACA;AACA,uDAAuD,6DAAe,yBAAyB,KAAK,WAAW;AAC/G;AACA;AACA;AACA,oBAAoB,iEAAa;AACjC,mBAAmB,gEAAY;AAC/B,sBAAsB,mEAAe;AACrC,wBAAwB,qEAAiB;AACzC;AACA;AACA;;;;;;;;;;;;;;;;ACpBmC;AACpB;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,wDAAU;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACxCiC;AAClB,6BAA6B,gDAAO;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,iBAAiB,KAAK,gCAAgC,MAAM,4BAA4B,SAAS,gDAAgD,cAAc,gDAAgD;AAC5P;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;AClB6D;AACvB;AACL;AAClB,gCAAgC,gDAAO;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,iBAAiB,uBAAuB,iCAAiC;AAC3G;AACA;AACA,oDAAoD,iBAAiB;AACrE;AACA;AACA,8BAA8B,sEAAW;AACzC,8BAA8B,iEAAmB,UAAU,SAAS,YAAY;AAChF;AACA,8BAA8B,iEAAmB,UAAU,EAAE,QAAQ,SAAS,YAAY;AAC1F,aAAa;AACb,mCAAmC,mEAAqB,MAAM;AAC9D;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACjCoE;AAC9B;AACL;AAClB,8BAA8B,gDAAO;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,6DAAe,CAAC,2DAAa,8BAA8B,OAAO,sBAAsB,EAAE,6DAAe,8BAA8B,UAAU,yBAAyB,4EAAe,yBAAyB,SAAS,+CAA+C,kBAAkB,6DAAe,+BAA+B;AACxW;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACpBsC;AACL;AAClB,4BAA4B,gDAAO;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD,gBAAgB;AACrE;AACA;AACA;AACA;AACA,wDAAwD,iBAAiB,SAAS,6DAAe,CAAC,2DAAa,UAAU;AACzH;AACA,2BAA2B,6DAAe,CAAC,2DAAa,WAAW;AACnE;AACA,yCAAyC,aAAa;AACtD;AACA;AACA,kCAAkC,iBAAiB,SAAS,aAAa;AACzE;AACA;AACA;AACA,uDAAuD,WAAW;AAClE;AACA;AACA,gDAAgD,UAAU;AAC1D;AACA;AACA;AACA;AACA,sBAAsB,6DAAe,CAAC,iEAAmB,oCAAoC,sBAAsB,gBAAgB,IAAI,mEAAqB;AAC5J,8BAA8B,6DAAe,CAAC,2DAAa,UAAU;AACrE,aAAa,kBAAkB;AAC/B;AACA;AACA;AACA;AACA,oBAAoB,mEAAqB;AACzC;AACA,sCAAsC,6DAAe,iBAAiB,EAAE,6DAAe,CAAC,2DAAa,UAAU;AAC/G;AACA,sCAAsC,6DAAe,CAAC,2DAAa,UAAU;AAC7E,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AC7DsC;AACL;AAClB,4BAA4B,gDAAO;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,iBAAiB,KAAK,iEAAmB,CAAC,6DAAe,2CAA2C,EAAE,6DAAe,6BAA6B;AAChL;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACnBiC;AAClB,gCAAgC,gDAAO;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,uDAAuD;AAC1G;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,SAAS;AAC9B;AACA,SAAS;AACT;AACA;AACA,iEAAiE,sCAAsC;AACvG,4BAA4B,4CAA4C;AACxE,gDAAgD,gCAAgC,EAAE,8CAA8C,iBAAiB,yCAAyC;AAC1L;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACnCiC;AAClB,8BAA8B,gDAAO;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yFAAyF,uCAAuC,WAAW,sCAAsC;AACjL,yFAAyF,uCAAuC,WAAW,sCAAsC;AACjL;AACA,6CAA6C,gBAAgB,4BAA4B,UAAU,yCAAyC,KAAK;AACjJ;AACA,kGAAkG,yCAAyC,WAAW,wCAAwC;AAC9L;AACA;AACA,wCAAwC,UAAU,6CAA6C,KAAK;AACpG;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;AC5BiC;AAClB,2BAA2B,gDAAO;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,iBAAiB,OAAO,+BAA+B,mBAAmB,kCAAkC;AACxJ;AACA,8BAA8B,+BAA+B;AAC7D;AACA;AACA;;;;;;;;;;;;;;;;;;;;ACnBiD;AACE;AACzB;AACX;AACf;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,wCAAwC,EAAE,IAAI;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,mBAAmB,EAAE,KAAK;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,sDAAkB,GAAG,gOAAW;AACnD;AACA;AACA;AACA;AACA,wBAAwB,UAAU;AAClC,0BAA0B,qDAAY;AACtC;AACA,4BAA4B,WAAW;AACvC,yBAAyB,kDAAS,CAAC,6NAAU;AAC7C;AACA,oCAAoC,kDAAS,CAAC,6NAAU;AACxD;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AC7D2C;AAC5B;AACf;AACA;AACA,wBAAwB,OAAO;AAC/B;AACA,qBAAqB,0NAAK,4BAA4B,oDAAY;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,sBAAsB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AC9D8D;AACpC;AACX;AACf;AACA;AACA,sDAAsD;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,qCAAqC;AACnD,cAAc,4DAA4D;AAC1E,cAAc,iEAAiE;AAC/E,cAAc,2DAA2D;AACzE,cAAc,sCAAsC;AACpD,cAAc,0DAA0D;AACxE,cAAc,+DAA+D;AAC7E,cAAc,yDAAyD;AACvE,cAAc,2CAA2C;AACzD,cAAc,iEAAiE;AAC/E,cAAc,4CAA4C;AAC1D,cAAc;AACd;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,cAAc,qCAAqC;AACnD,cAAc,yDAAyD;AACvE,cAAc,8DAA8D;AAC5E,cAAc,wDAAwD;AACtE,cAAc,sCAAsC;AACpD,cAAc,6DAA6D;AAC3E,cAAc,kEAAkE;AAChF,cAAc,4DAA4D;AAC1E,cAAc,2CAA2C;AACzD,cAAc,8DAA8D;AAC5E,cAAc,4CAA4C;AAC1D,cAAc;AACd;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,+BAA+B,wDAAe,CAAC,sDAAa,wBAAwB,MAAM,iBAAiB,EAAE,wDAAe,yBAAyB,UAAU,oBAAoB,4EAAe,yBAAyB,SAAS,0CAA0C,kBAAkB,wDAAe,0BAA0B;AACzU;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UCvEA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA,sDAAsD;WACtD,sCAAsC,iEAAiE;WACvG;WACA;WACA;WACA;WACA;WACA;;;;;WCzBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;ACNA;AACA;AACA;AACoE;AACF;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,wEAAmB;AAC5C;AACA;AACA,yBAAyB,uEAAkB;AAC3C;AACA;AACA;AACA;AACA;AACA","sources":["webpack://ts-webpack/./src/controllers/JSONPageController.ts","webpack://ts-webpack/./src/controllers/PageController.ts","webpack://ts-webpack/./src/controllers/RealmPageController.ts","webpack://ts-webpack/./src/modules/Module.ts","webpack://ts-webpack/./src/modules/general/GovernmentModule.ts","webpack://ts-webpack/./src/modules/general/HeraldryModule.ts","webpack://ts-webpack/./src/modules/general/LocationModule.ts","webpack://ts-webpack/./src/modules/general/RealmNameModule.ts","webpack://ts-webpack/./src/modules/geography/BiomesModule.ts","webpack://ts-webpack/./src/modules/geography/ClimateModule.ts","webpack://ts-webpack/./src/modules/geography/ParentEntityModule.ts","webpack://ts-webpack/./src/modules/geography/RiversModule.ts","webpack://ts-webpack/./src/modules/geography/SizeModule.ts","webpack://ts-webpack/./src/realm/Realm.ts","webpack://ts-webpack/./src/text/blocks/Block.ts","webpack://ts-webpack/./src/text/blocks/Geography.ts","webpack://ts-webpack/./src/text/blocks/Overview.ts","webpack://ts-webpack/./src/text/sections/Section.ts","webpack://ts-webpack/./src/text/sections/geography/Climate.ts","webpack://ts-webpack/./src/text/sections/geography/Ecoregions.ts","webpack://ts-webpack/./src/text/sections/geography/Location.ts","webpack://ts-webpack/./src/text/sections/geography/Rivers.ts","webpack://ts-webpack/./src/text/sections/overview/Basics.ts","webpack://ts-webpack/./src/text/sections/overview/CoatOfArms.ts","webpack://ts-webpack/./src/text/sections/overview/Heraldry.ts","webpack://ts-webpack/./src/text/sections/overview/Sigil.ts","webpack://ts-webpack/./src/util/Lang.ts","webpack://ts-webpack/./src/util/Rand.ts","webpack://ts-webpack/./src/util/Util.ts","webpack://ts-webpack/webpack/bootstrap","webpack://ts-webpack/webpack/runtime/create fake namespace object","webpack://ts-webpack/webpack/runtime/define property getters","webpack://ts-webpack/webpack/runtime/hasOwnProperty shorthand","webpack://ts-webpack/webpack/runtime/make namespace object","webpack://ts-webpack/./src/index.ts"],"sourcesContent":["import PageController from \"./PageController\";\r\nexport default class JSONPageController extends PageController {\r\n    constructor() {\r\n        super();\r\n    }\r\n}\r\n// const jsonContainer: HTMLElement =\r\n// document.querySelector('.container--json')!;\r\n// if (arr && arr.length > 1) {\r\n// // Show JSON\r\n// jsonContainer.classList.remove('hidden');\r\n// const jsonContent: HTMLElement = document.querySelector('.json-content')!;\r\n// jsonContent.innerHTML =\r\n//   '<pre class=\"json-format\">' +\r\n//   JSON.stringify(realm, null, '  ') +\r\n//   '</pre>';\r\n// handleJsonButtons();\r\n// // Hide content\r\n// const content: HTMLElement = document.querySelector('div.content')!;\r\n// content.classList.add('hidden');\r\n// applyText('name', Util.readWord(realm.realmName));\r\n// } else {\r\n// // Don't show JSON\r\n// jsonContainer.innerHTML = '';\r\n// updateView();\r\n// }\r\n// function handleJsonButtons() {\r\n//   // Handle the Realm from JSON button\r\n//   const btnToRealm: HTMLButtonElement = document.getElementById(\r\n//     'btnToRealm'\r\n//   )! as HTMLButtonElement;\r\n//   btnToRealm.addEventListener('click', () => {\r\n//     const arr: RegExpMatchArray | null = window.location.href.match(\r\n//       /(.+\\?[a-z0-9,-]+).*\\&/\r\n//     );\r\n//     if (arr && arr.length > 1) {\r\n//       window.open(arr[1], '_self');\r\n//     }\r\n//   });\r\n//   btnToRealm.addEventListener('mouseover', () => {\r\n//     if (btnJson.hasAttribute('disabled')) return;\r\n//     document.getElementById('labelJson')!.innerHTML = 'View the Realm page';\r\n//     fadeInJsonLabel();\r\n//   });\r\n//   btnToRealm.addEventListener('mouseout', fadeOutJsonLabel);\r\n//   // Handle the Copy JSON button\r\n//   const btnCopyJson: HTMLButtonElement = document.getElementById(\r\n//     'btnCopyJson'\r\n//   )! as HTMLButtonElement;\r\n//   btnCopyJson.addEventListener('click', () => {\r\n//     // Play copied animation\r\n//     btnCopyJson.innerHTML = `<i class=\"fa-solid fa-check\" style=\"color: orangered\"></i>Copied!`;\r\n//     btnCopyJson.setAttribute('disabled', 'true');\r\n//     document.getElementById('labelJson')!.style.opacity = '0';\r\n//     navigator.clipboard.writeText(JSON.stringify(realm, null, '  '));\r\n//     setTimeout(() => {\r\n//       // Play copied animation\r\n//       btnCopyJson.innerHTML = `<i class=\"fa-solid fa-copy\"></i>Copy JSON`;\r\n//       btnCopyJson.removeAttribute('disabled');\r\n//     }, 2000);\r\n//   });\r\n//   btnCopyJson.addEventListener('mouseover', () => {\r\n//     if (btnCopyJson.hasAttribute('disabled')) return;\r\n//     document.getElementById('labelJson')!.innerHTML =\r\n//       'Copy this JSON to your clipboard';\r\n//     fadeInJsonLabel();\r\n//   });\r\n//   btnCopyJson.addEventListener('mouseout', fadeOutJsonLabel);\r\n//   // Handle the Download JSON button\r\n//   const btnDownloadJson: HTMLButtonElement = document.getElementById(\r\n//     'btnDownloadJson'\r\n//   )! as HTMLButtonElement;\r\n//   btnDownloadJson.addEventListener('click', () => {\r\n//     var blob = new Blob([JSON.stringify(realm, null, '')], {\r\n//       type: 'text/plain;charset=utf-8'\r\n//     });\r\n//     Util.download(\r\n//       Util.readWord(realm.realmName) + '.json',\r\n//       JSON.stringify(realm, null, '  ')\r\n//     );\r\n//   });\r\n//   btnDownloadJson.addEventListener('mouseover', () => {\r\n//     if (btnDownloadJson.hasAttribute('disabled')) return;\r\n//     document.getElementById('labelJson')!.innerHTML =\r\n//       'Download this JSON to a .json file';\r\n//     fadeInJsonLabel();\r\n//   });\r\n//   btnDownloadJson.addEventListener('mouseout', fadeOutJsonLabel);\r\n//   function fadeInJsonLabel() {\r\n//     document.getElementById('labelJson')!.style.top = '0';\r\n//     document.getElementById('labelJson')!.style.opacity = '1';\r\n//   }\r\n//   function fadeOutJsonLabel() {\r\n//     document.getElementById('labelJson')!.style.top = '0.4rem';\r\n//     document.getElementById('labelJson')!.style.opacity = '0';\r\n//   }\r\n","import Rand from '../util/Rand';\r\nimport Realm from '../realm/Realm';\r\nimport Util from '../util/Util';\r\nexport default class PageController {\r\n    constructor() {\r\n        this.handleDarkMode();\r\n        this.handleSeed();\r\n        // Realm generates itself\r\n        this.realm = new Realm();\r\n        this.fadeInSections();\r\n    }\r\n    handleSeed() {\r\n        const url = window.location.href;\r\n        const arr = url.match(/\\?([a-z0-9,-]+)/);\r\n        if (arr && arr.length > 1) {\r\n            Rand.seed = arr[1];\r\n        }\r\n        else {\r\n            Rand.generateSeed();\r\n            let url = window.location.href;\r\n            url = url.substring(0, url.indexOf('?'));\r\n            if (window.location.href)\r\n                window.location.replace(url + '?' + Rand.seed);\r\n            // Page refreshes here, forcing the first condition\r\n        }\r\n    }\r\n    fadeInSections() {\r\n        // Delay intro animations\r\n        const sectionEls = document.querySelectorAll('.container');\r\n        sectionEls.forEach((node, index) => {\r\n            const el = node;\r\n            setTimeout(() => {\r\n                el.classList.add('fade-in');\r\n            }, 100 * index);\r\n        });\r\n    }\r\n    handleDarkMode() {\r\n        // Initial local preferences\r\n        const darkModeAtStart = localStorage.getItem('darkMode');\r\n        const isDarkModeAtStart = darkModeAtStart != null && darkModeAtStart == 'true';\r\n        isDarkModeAtStart ? Util.toggleDarkMode() : null;\r\n        // Handle dark mode button\r\n        const btnToggleDarkMode = document.getElementById('btnToggleDarkMode');\r\n        btnToggleDarkMode.addEventListener('click', () => {\r\n            Util.toggleDarkMode();\r\n            // Add the background-transition class to the body if it's not already there\r\n            const body = document.querySelector('body');\r\n            if (!body.classList.contains('background-transition')) {\r\n                body.classList.add('background-transition');\r\n            }\r\n        });\r\n    }\r\n}\r\n","import Block from '../text/blocks/Block';\r\nimport GeographyBlock from '../text/blocks/Geography';\r\nimport OverviewBlock from '../text/blocks/Overview';\r\nimport * as layout from '../text/layout.json';\r\nimport Rand from '../util/Rand';\r\nimport Util from '../util/Util';\r\nimport PageController from './PageController';\r\nexport default class RealmPageController extends PageController {\r\n    constructor() {\r\n        super();\r\n        // UI & Controls\r\n        this.handleFavorites();\r\n        this.handleNewRealmButton();\r\n        this.handleCopyLinkButton();\r\n        this.handleTweetButton();\r\n        // this.handleJSONButton();\r\n        // Apply Content\r\n        this.applyHeroImage();\r\n        this.write();\r\n        console.log(this.realm);\r\n    }\r\n    applyHeroImage() {\r\n        // Choose a photo for the hero\r\n        const heroEl = document.getElementById('hero');\r\n        heroEl.setAttribute('style', `background-image: linear-gradient(rgba(0, 0, 0, 0.7), rgba(0, 0, 0, 0.7)), url(${this.realm.heroImageUrl})`);\r\n        // Apply the hero text\r\n        const heroTextEl = document.querySelector('#hero > h2');\r\n        heroTextEl.textContent = this.realm.name;\r\n    }\r\n    write() {\r\n        const blockMap = {\r\n            overview: OverviewBlock,\r\n            geography: GeographyBlock\r\n        };\r\n        // Apply each block\r\n        let blocks = [];\r\n        layout.forEach((b) => {\r\n            let block = blockMap[b.name]\r\n                ? new blockMap[b.name](this.realm, b.name, b.sections)\r\n                : new Block(this.realm, b.name, b.sections);\r\n            blocks.push(block);\r\n        });\r\n        const el = document.getElementById('content');\r\n        blocks.forEach((block) => {\r\n            el.appendChild(block.render());\r\n        });\r\n    }\r\n    handleNewRealmButton() {\r\n        const btnStart = document.getElementById('btnStart');\r\n        btnStart.addEventListener('click', () => {\r\n            // This will refresh the page with a new seed\r\n            Rand.generateSeed();\r\n            let url = window.location.href;\r\n            url = url.substring(0, url.indexOf('?'));\r\n            if (window.location.href)\r\n                window.location.replace(url + '?' + Rand.seed);\r\n        });\r\n    }\r\n    handleCopyLinkButton() {\r\n        const btnCopyLink = document.getElementById('btnCopyLink');\r\n        btnCopyLink.addEventListener('click', () => {\r\n            navigator.clipboard.writeText(window.location.href);\r\n            // Play copied animation\r\n            btnCopyLink.innerHTML = `<i class=\"fa-solid fa-check\" style=\"color: #17b664\"></i>Copied!`;\r\n            btnCopyLink.setAttribute('disabled', 'true');\r\n            document.getElementById('labelShare').style.opacity = '0';\r\n            setTimeout(() => {\r\n                // Play copied animation\r\n                btnCopyLink.innerHTML = `<i class=\"fa-solid fa-copy\"></i>Copy Link`;\r\n                btnCopyLink.removeAttribute('disabled');\r\n            }, 2000);\r\n        });\r\n        btnCopyLink.addEventListener('mouseover', () => {\r\n            if (btnCopyLink.hasAttribute('disabled'))\r\n                return;\r\n            document.getElementById('labelShare').innerHTML = window.location.href;\r\n            document.getElementById('labelShare').style.top = '0';\r\n            document.getElementById('labelShare').style.opacity = '1';\r\n        });\r\n        btnCopyLink.addEventListener('mouseout', this.fadeOutShareLabel);\r\n    }\r\n    handleTweetButton() {\r\n        const btnShareTwitter = document.getElementById('btnShareTwitter');\r\n        btnShareTwitter.addEventListener('click', () => {\r\n            Util.shareByTweet(this.realm);\r\n        });\r\n        btnShareTwitter.addEventListener('mouseover', () => {\r\n            if (btnShareTwitter.hasAttribute('disabled'))\r\n                return;\r\n            document.getElementById('labelShare').innerHTML =\r\n                'Share this Realm on Twitter';\r\n            document.getElementById('labelShare').style.top = '0';\r\n            document.getElementById('labelShare').style.opacity = '1';\r\n        });\r\n        btnShareTwitter.addEventListener('mouseout', this.fadeOutShareLabel);\r\n    }\r\n    handleJSONButton() {\r\n        const btnJson = document.getElementById('btnJson');\r\n        btnJson.addEventListener('click', () => {\r\n            const url = window.location.href.replace(/(?<=.*)realm.html(?=.*)/, 'json.html');\r\n            window.open(url, '_self');\r\n        });\r\n        btnJson.addEventListener('mouseover', () => {\r\n            if (btnJson.hasAttribute('disabled'))\r\n                return;\r\n            document.getElementById('labelShare').innerHTML =\r\n                \"View this Realm's JSON data\";\r\n            document.getElementById('labelShare').style.top = '0';\r\n            document.getElementById('labelShare').style.opacity = '1';\r\n        });\r\n        btnJson.addEventListener('mouseout', this.fadeOutShareLabel);\r\n    }\r\n    fadeInShareLabel() {\r\n        document.getElementById('labelShare').style.top = '0';\r\n        document.getElementById('labelShare').style.opacity = '1';\r\n    }\r\n    fadeOutShareLabel() {\r\n        document.getElementById('labelShare').style.top = '0.4rem';\r\n        document.getElementById('labelShare').style.opacity = '0';\r\n    }\r\n    handleFavorites() {\r\n        // Get favorites from local storage\r\n        if (!localStorage.getItem('favorites'))\r\n            localStorage.setItem('favorites', JSON.stringify([]));\r\n        let favorites = JSON.parse(localStorage.getItem('favorites'));\r\n        // Handle the favorites badges\r\n        const favoritesEl = document.getElementById('favorites');\r\n        favoritesEl.addEventListener('click', (event) => {\r\n            const removeId = event.target.getAttribute('removeId');\r\n            if (removeId) {\r\n                favorites = favorites.filter((f) => f.id != removeId);\r\n                event.preventDefault();\r\n                localStorage.setItem('favorites', JSON.stringify(favorites));\r\n                refreshFavorites();\r\n            }\r\n        });\r\n        const btnFavorite = document.getElementById('btnFavorite');\r\n        btnFavorite.addEventListener('click', () => {\r\n            const f = {\r\n                id: Rand.seed,\r\n                name: this.realm.name\r\n            };\r\n            if (!favorites.some((v) => f.id == v.id)) {\r\n                favorites.push(f);\r\n            }\r\n            else {\r\n                favorites = favorites.filter((v) => v.id != f.id);\r\n            }\r\n            localStorage.setItem('favorites', JSON.stringify(favorites));\r\n            refreshFavorites();\r\n        });\r\n        const btnFavoriteIcon = document.querySelector('#btnFavorite i');\r\n        const btnFavoriteText = document.querySelector('#btnFavorite span');\r\n        // Do this the first time the page loads\r\n        refreshFavorites();\r\n        function refreshFavorites() {\r\n            btnFavoriteIcon.classList.remove('fa-solid', 'fa-regular', 'selected');\r\n            // Is the current realm already favorited?\r\n            const isFavorite = favorites.some((f) => f.id == Rand.seed);\r\n            btnFavoriteIcon.classList.add(isFavorite ? 'fa-solid' : 'fa-regular');\r\n            btnFavoriteText.innerHTML = isFavorite\r\n                ? 'This is one of your favorites'\r\n                : 'Add this Realm to your favorites';\r\n            // Create favorite badges\r\n            favoritesEl.innerHTML = '';\r\n            favorites.forEach((f) => {\r\n                let url = window.location.href;\r\n                url = url.substring(0, url.indexOf('?')) + '?' + f.id;\r\n                favoritesEl.innerHTML += `\r\n  <li class=\"favorite-badge\">\r\n    <a href=\"${url}\" target=\"_self\" class=\"btn btn--icon capitalized\">${f.name}</a>\r\n    <a class=\"btn btn--icon delete-favorite\">\r\n      <i class=\"fa-solid fa-xmark\" removeId=\"${f.id}\"></i>\r\n    </a>\r\n  </li>`;\r\n            });\r\n        }\r\n    }\r\n}\r\n","export default class Module {\r\n    constructor(realm) {\r\n        this.realm = realm;\r\n        this.run();\r\n    }\r\n    run() { }\r\n}\r\n// Module child class template\r\n// import Module from '../Module';\r\n// import Realm from '../../realm/Realm';\r\n// export default class xModule extends Module {\r\n//   constructor(realm: Realm) {\r\n//     super(realm);\r\n//   }\r\n//   protected run() {\r\n//   }\r\n// }\r\n","import Module from '../Module';\r\nimport { governments } from './governments.json';\r\nimport Rand from '../../util/Rand';\r\nexport default class GovernmentModule extends Module {\r\n    constructor(realm) {\r\n        super(realm);\r\n    }\r\n    run() {\r\n        // Government\r\n        let government;\r\n        do {\r\n            government = Rand.pick(governments);\r\n        } while (!government.size.includes(this.realm.size.sizeIndex));\r\n        this.rank = government.rank;\r\n        this.ruler = government.ruler;\r\n        this.realm.tags.push(this.rank);\r\n    }\r\n}\r\n","import Rand from '../../util/Rand';\r\nimport Module from '../Module';\r\nimport { charges, colorTinctures, layouts, metalTinctures, ordinaries } from './heraldry.json';\r\nimport { sigils } from './sigils.json';\r\nexport default class HeraldryModule extends Module {\r\n    constructor(realm) {\r\n        super(realm);\r\n    }\r\n    run() {\r\n        // Sigil\r\n        this.sigil = Rand.pick(sigils);\r\n        this.sigil.meaning = Rand.pick(this.sigil.meaning);\r\n        // Ordinary\r\n        this.ordinary = Rand.weightedPick(ordinaries, (item) => item.points);\r\n        // Choose exactly one metal tincture and one color tincture\r\n        let metal = Rand.weightedPick(metalTinctures, (item) => item.points);\r\n        let color = Rand.weightedPick(colorTinctures, (item) => item.points);\r\n        this.tinctures = [metal, color].sort((t) => (Rand.next() > 0.5 ? 1 : -1));\r\n        // Charge Layout\r\n        const availableLayouts = layouts.filter((l) => this.ordinary.layouts.some((m) => m.name == l.name));\r\n        this.chargeLayout =\r\n            this.ordinary.layouts.length > 0\r\n                ? Rand.weightedPick(availableLayouts, (l) => l.points)\r\n                : null;\r\n        if (!this.chargeLayout)\r\n            return;\r\n        // Charge tincture\r\n        // Heraldic rule: Never put a color on another color\r\n        // and never put a metal on top of another metal\r\n        const tinctureOverlapIndexes = this.ordinary.layouts.find((l) => l.name == this.chargeLayout.name).overlap;\r\n        let availableTinctures = metalTinctures;\r\n        if (tinctureOverlapIndexes.length > 0) {\r\n            const overlapTincture = this.tinctures[tinctureOverlapIndexes[0]];\r\n            if (overlapTincture.type == 'metal') {\r\n                availableTinctures = colorTinctures;\r\n            }\r\n        }\r\n        this.chargeTincture = Rand.pick(availableTinctures);\r\n        // Pick a charge\r\n        this.charge = Rand.weightedPick(charges, (item) => item.points);\r\n        if (this.chargeLayout.count < 3) {\r\n            this.charge = { name: this.sigil.name, points: 0, url: this.sigil.icon };\r\n        }\r\n        // Is it the sigil used on the heraldry? Add a tag if it is\r\n        if (this.charge.name == this.sigil.name && this.chargeLayout)\r\n            this.realm.addTag('sigilAsCharge');\r\n    }\r\n}\r\n","import Rand from '../../util/Rand';\r\nimport { BiomeType } from '../geography/BiomesModule';\r\nimport Module from '../Module';\r\nexport var Direction;\r\n(function (Direction) {\r\n    Direction[\"NORTH\"] = \"north\";\r\n    Direction[\"NORTH_EAST\"] = \"north-east\";\r\n    Direction[\"EAST\"] = \"east\";\r\n    Direction[\"SOUTH_EAST\"] = \"south-east\";\r\n    Direction[\"SOUTH\"] = \"south\";\r\n    Direction[\"SOUTH_WEST\"] = \"south-west\";\r\n    Direction[\"WEST\"] = \"west\";\r\n    Direction[\"NORTH_WEST\"] = \"north-west\";\r\n})(Direction || (Direction = {}));\r\nexport default class LocationModule extends Module {\r\n    constructor(realm) {\r\n        super(realm);\r\n    }\r\n    run() {\r\n        this.locationWithinParentEntity = Rand.pick(Object.values(Direction));\r\n        // Add direction tags south-west => south, west\r\n        this.locationWithinParentEntity\r\n            .split('-')\r\n            .forEach((l) => this.realm.addTag(l));\r\n        // 40% chance to be coastal\r\n        if (Rand.next() < 0.4) {\r\n            this.directionToCoast = this.locationWithinParentEntity;\r\n            this.realm.addTag(BiomeType.COAST);\r\n        }\r\n    }\r\n    static isCardinalDirection(direction) {\r\n        return !direction.includes('-');\r\n    }\r\n}\r\n","import Rand from '../../util/Rand';\r\nimport Module from '../Module';\r\nimport { placeRoots, placeSuffixes } from './place-names.json';\r\nexport default class RealmNameModule extends Module {\r\n    constructor(realm) {\r\n        super(realm);\r\n    }\r\n    run() {\r\n        // Roots cannot be used by an existing river\r\n        const roots = [...placeRoots];\r\n        let validRoots = roots.filter((p) => this.realm.evaluateCondition(p.condition));\r\n        const root = Object.assign({}, Rand.weightedPick(validRoots, (item) => item.points));\r\n        const suffixes = [...placeSuffixes];\r\n        let validSuffixes = suffixes.filter((p) => this.realm.evaluateCondition(p.condition));\r\n        let suffix;\r\n        do {\r\n            suffix = Rand.weightedPick(validSuffixes, (item) => item.points);\r\n            this.name = { root: root, suffix: suffix };\r\n        } while (!this.isValidRealmName(this.name));\r\n    }\r\n    isValidRealmName(word) {\r\n        let valid = true;\r\n        // Root and suffix can't be the same\r\n        if (word.root == word.suffix)\r\n            return false;\r\n        return valid;\r\n    }\r\n}\r\n","import Rand from '../../util/Rand';\r\nimport Util from '../../util/Util';\r\nimport { Direction } from '../general/LocationModule';\r\nimport Module from '../Module';\r\nimport { Humidity, Temperature } from './ClimateModule';\r\nimport SizeModule from './SizeModule';\r\nimport * as ecoregionDescriptions from './ecoregion-descriptions.json';\r\nexport var BiomeType;\r\n(function (BiomeType) {\r\n    BiomeType[\"GRASSLAND\"] = \"grassland\";\r\n    BiomeType[\"TUNDRA\"] = \"tundra\";\r\n    BiomeType[\"BOREAL_FOREST\"] = \"borealForest\";\r\n    BiomeType[\"TEMPERATE_FOREST\"] = \"temperateForest\";\r\n    BiomeType[\"MOUNTAINS\"] = \"mountains\";\r\n    BiomeType[\"COAST\"] = \"coast\";\r\n})(BiomeType || (BiomeType = {}));\r\nexport default class BiomesModule extends Module {\r\n    constructor(realm) {\r\n        super(realm);\r\n    }\r\n    run() {\r\n        this.biomes = [];\r\n        // Add a coast biome\r\n        let remainingSize = this.realm.size.sizeIndex + 1;\r\n        if (this.realm.tags.includes(BiomeType.COAST)) {\r\n            const coastBiome = {\r\n                name: ecoregionDescriptions[BiomeType.COAST],\r\n                type: BiomeType.COAST,\r\n                size: SizeModule.getSizeFromIndex(Rand.between(1, remainingSize, true)),\r\n                direction: this.realm.location.directionToCoast\r\n            };\r\n        }\r\n        // Limit available biome types\r\n        let availableBiomeTypes = Object.values(BiomeType).filter((biomeType) => {\r\n            if (biomeType == BiomeType.COAST)\r\n                return false;\r\n            switch (this.realm.climate.humidity) {\r\n                case Humidity.DRY:\r\n                    // Dry? Remove boreal-forest and temperate-forest\r\n                    return ![\r\n                        BiomeType.BOREAL_FOREST,\r\n                        BiomeType.TEMPERATE_FOREST\r\n                    ].includes(biomeType);\r\n                    break;\r\n                case Humidity.WET:\r\n                    // Wet? Remove grassland and tundra\r\n                    return ![BiomeType.GRASSLAND, BiomeType.TUNDRA].includes(biomeType);\r\n                    break;\r\n            }\r\n            if (this.realm.climate.temperature == Temperature.WARM) {\r\n                // Warm? Remove boreal-forest and tundra\r\n                return ![BiomeType.BOREAL_FOREST, BiomeType.TUNDRA].includes(biomeType);\r\n            }\r\n            return true;\r\n        });\r\n        // Cannot be a combined direction like north-east or south-west, must be one of the four cardinal directions or 'middle'\r\n        let availableDirections = Object.values(Direction).filter((d) => d.split('-').length == 1);\r\n        // Create some number of biomes\r\n        while (remainingSize > 0 && availableBiomeTypes.length > 0) {\r\n            let biomeSize = Rand.between(1, remainingSize, true);\r\n            remainingSize -= biomeSize;\r\n            let biomeType = Rand.pick(availableBiomeTypes);\r\n            availableBiomeTypes = Util.arrayRemove(availableBiomeTypes, biomeType);\r\n            let biomeDirection = Rand.pick(availableDirections);\r\n            availableDirections = Util.arrayRemove(availableDirections, biomeDirection);\r\n            const biome = {\r\n                name: ecoregionDescriptions[biomeType].text,\r\n                type: biomeType,\r\n                size: SizeModule.getSizeFromIndex(biomeSize),\r\n                direction: biomeDirection\r\n            };\r\n            this.biomes.push(biome);\r\n            this.realm.addTag(biomeType);\r\n        }\r\n    }\r\n}\r\n","import Module from '../Module';\r\nimport Rand from '../../util/Rand';\r\nimport Util from '../../util/Util';\r\nimport { Direction } from '../general/LocationModule';\r\nimport { summer, winter } from './season-descriptions.json';\r\nexport var Temperature;\r\n(function (Temperature) {\r\n    Temperature[\"COLD\"] = \"cold\";\r\n    Temperature[\"TEMPERATE\"] = \"temperate\";\r\n    Temperature[\"WARM\"] = \"warm\";\r\n})(Temperature || (Temperature = {}));\r\nexport var Humidity;\r\n(function (Humidity) {\r\n    Humidity[\"WET\"] = \"wet\";\r\n    Humidity[\"DRY\"] = \"dry\";\r\n})(Humidity || (Humidity = {}));\r\nexport default class ClimateModule extends Module {\r\n    constructor(realm) {\r\n        super(realm);\r\n    }\r\n    run() {\r\n        // Temperature: Default is TEMPERATE\r\n        // If location is in the north, 60% chance COLD\r\n        // If location is in the south, 60% chance WARM\r\n        if (this.realm.location.locationWithinParentEntity.includes(Direction.NORTH)) {\r\n            this.temperature =\r\n                Rand.next() < 0.6 ? Temperature.COLD : Temperature.TEMPERATE;\r\n        }\r\n        else if (this.realm.location.locationWithinParentEntity.includes(Direction.SOUTH)) {\r\n            this.temperature =\r\n                Rand.next() < 0.6 ? Temperature.WARM : Temperature.TEMPERATE;\r\n        }\r\n        else {\r\n            this.temperature = Temperature.TEMPERATE;\r\n        }\r\n        this.realm.addTag(this.temperature);\r\n        // Humidity\r\n        if (this.realm.tags.includes('coast')) {\r\n            this.humidity = Humidity.WET;\r\n        }\r\n        else {\r\n            this.humidity = Rand.pick(Object.values(Humidity));\r\n        }\r\n        this.realm.addTag(this.humidity);\r\n        // Choose words to describe summer and winter\r\n        this.summerAdjectives = this.chooseSeasonAdjectives(summer[this.temperature].concat(summer[this.humidity]));\r\n        this.winterAdjectives = this.chooseSeasonAdjectives(winter[this.temperature].concat(winter[this.humidity]));\r\n    }\r\n    chooseSeasonAdjectives(adjectives) {\r\n        let arr = [];\r\n        for (let i = 0; i < 2; i++) {\r\n            const adjective = Rand.pick(adjectives);\r\n            arr.push(adjective);\r\n            adjectives = Util.arrayRemove(adjectives, adjective);\r\n            //  If the word is longer than 6 letters, step out of the loop\r\n            //  Otherwise, 50% chance to step out of the loop\r\n            if (Rand.next() < 0.5 || adjective.length > 6)\r\n                break;\r\n        }\r\n        return arr;\r\n    }\r\n}\r\n","import Rand from '../../util/Rand';\r\nimport Module from '../Module';\r\nimport { adjectives, governments, templates } from './parent-entity.json';\r\nexport default class ParentEntityModule extends Module {\r\n    constructor(realm) {\r\n        super(realm);\r\n    }\r\n    run() {\r\n        const template = Rand.pick(templates);\r\n        this.adjective = Rand.pick(adjectives);\r\n        this.government = Rand.pick(governments);\r\n        const adjective = this.adjective;\r\n        const government = this.government.noun;\r\n        this.name = eval(template);\r\n    }\r\n}\r\n","import Lang from '../../util/Lang';\r\nimport Rand from '../../util/Rand';\r\nimport Util from '../../util/Util';\r\nimport LocationModule, { Direction } from '../general/LocationModule';\r\nimport Module from '../Module';\r\nimport { BiomeType } from './BiomesModule';\r\nimport { Humidity } from './ClimateModule';\r\nimport { riverSuffixes, roots, tributaryPrefixes, tributarySuffixes } from './river-names.json';\r\nexport default class RiversModule extends Module {\r\n    constructor(realm) {\r\n        super(realm);\r\n    }\r\n    run() {\r\n        this.rivers = [];\r\n        this.tributaries = [];\r\n        // Pick a number of rivers\r\n        let riverCount = 0;\r\n        switch (this.realm.climate.humidity) {\r\n            case Humidity.DRY:\r\n                riverCount = Rand.between(0, 2, true);\r\n                break;\r\n            case Humidity.WET:\r\n                riverCount = Rand.between(2, 4, true);\r\n        }\r\n        // For small realms, there should only be one river\r\n        if (this.realm.size.sizeIndex < 2) {\r\n            riverCount = 1;\r\n        }\r\n        // Add rivers\r\n        for (let i = 0; i < riverCount; i++)\r\n            this.addNewRiver();\r\n    }\r\n    addNewRiver() {\r\n        // Determine the directions (to and from) the river will flow\r\n        // Rivers tend to flow from mountains towards coasts, so factor this in if those biomes are present\r\n        const mountains = this.realm.biomes.biomes.find((b) => b.type == BiomeType.MOUNTAINS) ||\r\n            null;\r\n        const coast = this.realm.biomes.biomes.find((b) => b.type == BiomeType.COAST) || null;\r\n        // Only use cardinal directions\r\n        let availableDirections = Object.values(Direction).filter((d) => LocationModule.isCardinalDirection(d) &&\r\n            (!coast || d != coast.direction) &&\r\n            (!mountains || d != mountains.direction));\r\n        let flowsFrom = mountains && Rand.next() < 0.8\r\n            ? mountains.direction\r\n            : Rand.pick(availableDirections);\r\n        // Rivers can't flow to the same place they're flowing from\r\n        Util.arrayRemove(availableDirections, flowsFrom);\r\n        let flowsTo = coast\r\n            ? coast.direction\r\n            : Rand.pick(availableDirections);\r\n        const riverName = this.getRiverName();\r\n        const tributaries = this.getTributaries(riverName);\r\n        let river = {\r\n            name: riverName,\r\n            flowsTo: flowsTo,\r\n            flowsFrom: flowsFrom,\r\n            flowsToCoast: coast,\r\n            flowsFromMountains: mountains,\r\n            tributaries: tributaries\r\n        };\r\n        this.rivers.push(river);\r\n    }\r\n    getRiverName() {\r\n        // Roots cannot be used by an existing river\r\n        let validRoots = roots.filter((p) => this.rivers.every((r) => r.name.root.text != p.text) &&\r\n            this.realm.evaluateCondition(p.condition));\r\n        let validSuffixes = riverSuffixes.filter((p) => this.realm.evaluateCondition(p.condition));\r\n        let riverName;\r\n        do {\r\n            let root = Rand.weightedPick(validRoots, (item) => item.points);\r\n            let suffix = Rand.weightedPick(validSuffixes, (item) => item.points);\r\n            riverName = { root: root, suffix: suffix };\r\n        } while (!this.isValidRiverName(riverName));\r\n        return riverName;\r\n    }\r\n    getTributaries(riverName) {\r\n        let tributaries = [];\r\n        const tributaryCount = Rand.between(0, 3);\r\n        for (let i = 0; i < tributaryCount; i++) {\r\n            const tributaryName = i == 0 && Rand.next() < 0.6 ? riverName : this.getRiverName();\r\n            // If the tributary name is the same as the stem, choose a tributary prefix and/or suffix\r\n            let prefix = null;\r\n            let suffix = null;\r\n            do {\r\n                if (riverName == tributaryName) {\r\n                    do {\r\n                        if (tributaryName == riverName)\r\n                            prefix = Rand.weightedPick(tributaryPrefixes, (item) => item.points);\r\n                        if (Rand.next() < 0.3)\r\n                            suffix = Rand.weightedPick(tributarySuffixes, (item) => item.points);\r\n                    } while (!prefix && !suffix);\r\n                }\r\n            } while (!this.isValidRiverName(tributaryName));\r\n            let tributary = {\r\n                name: tributaryName,\r\n                prefix: prefix,\r\n                suffix: suffix,\r\n                stem: null\r\n            };\r\n            // The more tributaries there are the lower the chance is to add a new one\r\n            const max = 5;\r\n            const remaining = max - this.tributaries.length;\r\n            const chance = remaining * (1 / max) + 0.1; // Always give it +10% chance\r\n            if (Rand.next() >= chance)\r\n                continue;\r\n            // Push to river tributary array (gets returned)\r\n            tributaries.push(tributary);\r\n            // Push to top level tributary array (of all tributaries)\r\n            this.tributaries.push(tributary);\r\n        }\r\n        return tributaries;\r\n    }\r\n    isValidRiverName(riverName) {\r\n        // Can't have two vowels next to each other\r\n        if (Lang.endsWithVowel(riverName.root.text) &&\r\n            Lang.startsWithVowel(riverName.suffix.text)) {\r\n            return false;\r\n        }\r\n        // No two rivers or tributaries can have the same name\r\n        const riverAndTributaryNames = this.tributaries\r\n            .map((t) => t.name)\r\n            .concat(this.rivers.map((r) => r.name));\r\n        if (riverAndTributaryNames.includes(riverName)) {\r\n            return false;\r\n        }\r\n        // Rivers' roots cannot end in their suffix (Hennen-en, Frau-au, etc.)\r\n        if (riverName.root.text.indexOf(riverName.suffix.text) ==\r\n            riverName.root.text.length - riverName.suffix.text.length) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n}\r\n","import Module from '../Module';\r\nimport Rand from '../../util/Rand';\r\nexport var Size;\r\n(function (Size) {\r\n    Size[\"VERY_SMALL\"] = \"very small\";\r\n    Size[\"SMALL\"] = \"small\";\r\n    Size[\"MEDIUM\"] = \"medium-sized\";\r\n    Size[\"LARGE\"] = \"large\";\r\n    Size[\"VERY_LARGE\"] = \"very large\";\r\n})(Size || (Size = {}));\r\nexport default class SizeModule extends Module {\r\n    constructor(realm) {\r\n        super(realm);\r\n    }\r\n    run() {\r\n        this.size = Rand.pick(Object.values(Size));\r\n        this.realm.addTag(this.size == Size.VERY_SMALL ? 'city' : 'region');\r\n    }\r\n    get sizeIndex() {\r\n        return Object.values(Size).indexOf(this.size);\r\n    }\r\n    static getSizeFromIndex(i) {\r\n        return Object.values(Size)[i];\r\n    }\r\n}\r\n","import SizeModule from '../modules/geography/SizeModule';\r\nimport LocationModule from '../modules/general/LocationModule';\r\nimport ParentEntityModule from '../modules/geography/ParentEntityModule';\r\nimport ClimateModule from '../modules/geography/ClimateModule';\r\nimport BiomesModule from '../modules/geography/BiomesModule';\r\nimport RiversModule from '../modules/geography/RiversModule';\r\nimport HeraldryModule from '../modules/general/HeraldryModule';\r\nimport GovernmentModule from '../modules/general/GovernmentModule';\r\nimport RealmNameModule from '../modules/general/RealmNameModule';\r\nimport * as heroImageUrls from './hero-images.json';\r\nimport Rand from '../util/Rand';\r\nimport Lang from '../util/Lang';\r\nexport default class Realm {\r\n    constructor() {\r\n        // Tags\r\n        this._tags = [];\r\n        this.runModules();\r\n    }\r\n    runModules() {\r\n        this.size = new SizeModule(this);\r\n        this.location = new LocationModule(this);\r\n        this.parentEntity = new ParentEntityModule(this);\r\n        this.climate = new ClimateModule(this);\r\n        this.biomes = new BiomesModule(this);\r\n        this.rivers = new RiversModule(this);\r\n        this.heraldry = new HeraldryModule(this);\r\n        this.government = new GovernmentModule(this);\r\n        this.realmName = new RealmNameModule(this);\r\n        this.heroImageUrl = this.pickHeroImage();\r\n    }\r\n    pickHeroImage() {\r\n        const validImages = heroImageUrls.filter((u) => {\r\n            return this.evaluateCondition(u.condition);\r\n        });\r\n        return 'assets/images/hero/' + Rand.pick(validImages).url;\r\n    }\r\n    addTag(tag) {\r\n        this._tags.push(tag);\r\n    }\r\n    get tags() {\r\n        return this._tags;\r\n    }\r\n    evaluateCondition(condition) {\r\n        if (condition == '')\r\n            return true;\r\n        let u = {};\r\n        this.tags.forEach((t) => (u[t] = true));\r\n        return new ConditionEvaluator().run(condition, u);\r\n    }\r\n    get name() {\r\n        return Lang.capitalize(Lang.readWord(this.realmName.name));\r\n    }\r\n}\r\nclass ConditionEvaluator {\r\n    constructor() { }\r\n    run(condition, t) {\r\n        // Regex instead?\r\n        const result = eval(`(${condition})`) ? true : false;\r\n        return result;\r\n    }\r\n}\r\n","import Lang from '../../util/Lang';\r\nimport Section from '../sections/Section';\r\nexport default class Block {\r\n    constructor(realm, name, sectionNames) {\r\n        this.sectionMap = {};\r\n        this.realm = realm;\r\n        this.name = name;\r\n        this.description = Lang.lorem(1);\r\n        this.sectionMap = this.createSectionMap();\r\n        this.sections = sectionNames.map((sectionName) => this.createSection(sectionName));\r\n    }\r\n    createSectionMap() {\r\n        return {};\r\n    }\r\n    createSection(sectionName) {\r\n        return this.sectionMap[sectionName]\r\n            ? new this.sectionMap[sectionName](this.realm, sectionName)\r\n            : new Section(this.realm, sectionName);\r\n    }\r\n    render() {\r\n        const el = document.createElement('article');\r\n        // Title\r\n        const titleEl = document.createElement('h2');\r\n        titleEl.innerHTML = `<span>${this.name.toUpperCase()}</span><br/><span style=\"word-wrap: break-word\" class=\"muted\">${this.description}</span>`;\r\n        el.appendChild(titleEl);\r\n        // Sections\r\n        const sectionListEl = document.createElement('ul');\r\n        el.appendChild(sectionListEl);\r\n        this.sections.forEach((section) => {\r\n            sectionListEl.appendChild(section.render());\r\n        });\r\n        return el;\r\n    }\r\n}\r\n","import ClimateSection from '../sections/geography/Climate';\r\nimport EcoregionsSection from '../sections/geography/Ecoregions';\r\nimport LocationSection from '../sections/geography/Location';\r\nimport RiversSection from '../sections/geography/Rivers';\r\nimport Block from './Block';\r\nexport default class GeographyBlock extends Block {\r\n    constructor(realm, name, sectionNames) {\r\n        super(realm, name, sectionNames);\r\n        this.name = `Geography`;\r\n        this.description = `The study of places and their environments`;\r\n    }\r\n    createSectionMap() {\r\n        return {\r\n            location: LocationSection,\r\n            ecoregions: EcoregionsSection,\r\n            rivers: RiversSection,\r\n            climate: ClimateSection\r\n            // biodiversity: BiodiversitySection\r\n        };\r\n    }\r\n}\r\n","import Lang from '../../util/Lang';\r\nimport BasicsSection from '../sections/overview/Basics';\r\nimport CoatOfArmsSection from '../sections/overview/CoatOfArms';\r\nimport HeraldrySection from '../sections/overview/Heraldry';\r\nimport SigilSection from '../sections/overview/Sigil';\r\nimport Block from './Block';\r\nexport default class OverviewBlock extends Block {\r\n    constructor(realm, name, sectionNames) {\r\n        super(realm, name, sectionNames);\r\n        this.name = `An Overview`;\r\n        this.description = `Facts and figures of the ${Lang.capitalize(realm.government.rank)} of ${realm.name}`;\r\n    }\r\n    createSectionMap() {\r\n        return {\r\n            basics: BasicsSection,\r\n            sigil: SigilSection,\r\n            heraldry: HeraldrySection,\r\n            coatOfArms: CoatOfArmsSection\r\n        };\r\n    }\r\n}\r\n","import Lang from '../../util/Lang';\r\nexport default class Section {\r\n    constructor(realm, name) {\r\n        this.realm = realm;\r\n        this.name = name;\r\n    }\r\n    render() {\r\n        const el = document.createElement('li');\r\n        el.classList.add('work-in-progress');\r\n        // Title\r\n        const titleEl = document.createElement('h3');\r\n        titleEl.textContent = this.name;\r\n        el.appendChild(titleEl);\r\n        // Placeholder content\r\n        const textEl = document.createElement('p');\r\n        textEl.textContent = Lang.lorem();\r\n        el.append(textEl);\r\n        return el;\r\n    }\r\n}\r\n// Section Template\r\n// import Realm from '../../../realm/Realm';\r\n// import Section from '../Section';\r\n// export default class LocationSection extends Section {\r\n//   constructor(realm: Realm, name: string) {\r\n//     super(realm, name);\r\n//   }\r\n//   public render(): HTMLElement {\r\n//     const el: HTMLElement = document.createElement('li');\r\n//     // Title\r\n//     const titleEl: HTMLElement = document.createElement('h3');\r\n//     titleEl.textContent = this.name;\r\n//     el.appendChild(titleEl);\r\n//     // Content\r\n//     const textEl: HTMLElement = document.createElement('p');\r\n//     // \"\"\r\n//     textEl.innerHTML = ``;\r\n//     el.append(textEl);\r\n//     return el;\r\n//   }\r\n// }\r\n","import Section from '../Section';\r\nexport default class ClimateSection extends Section {\r\n    constructor(realm, name) {\r\n        super(realm, name);\r\n    }\r\n    render() {\r\n        const el = document.createElement('li');\r\n        // Title\r\n        const titleEl = document.createElement('h3');\r\n        titleEl.textContent = this.name;\r\n        el.appendChild(titleEl);\r\n        // Content\r\n        const textEl = document.createElement('p');\r\n        // \"The climate of Nordland is cold and wet, with brisk winters and mild, cool summers.\"\r\n        textEl.innerHTML = `The climate of ${this.realm.name} is ${this.realm.climate.temperature} and ${this.realm.climate.humidity}, with ${this.realm.climate.summerAdjectives.join(', ')} summers and ${this.realm.climate.winterAdjectives.join(', ')} winters.`;\r\n        el.append(textEl);\r\n        return el;\r\n    }\r\n}\r\n","import { Size } from '../../../modules/geography/SizeModule';\r\nimport Lang from '../../../util/Lang';\r\nimport Section from '../Section';\r\nexport default class EcoregionsSection extends Section {\r\n    constructor(realm, name) {\r\n        super(realm, name);\r\n    }\r\n    render() {\r\n        const el = document.createElement('li');\r\n        // Title\r\n        const titleEl = document.createElement('h3');\r\n        titleEl.textContent = this.name;\r\n        el.appendChild(titleEl);\r\n        // Content\r\n        const textEl = document.createElement('p');\r\n        // \"The ecoregions of Nordland consist mostly of boreal-forest with a very small temperate-forest region in the west.\"\r\n        if (this.realm.biomes.biomes.length == 1) {\r\n            textEl.innerHTML = `${this.realm.name} consists entirely of ${this.realm.biomes.biomes[0].name}.`;\r\n        }\r\n        else {\r\n            textEl.innerHTML = `The ecoregions of ${this.realm.name} include `;\r\n            // todo: sort by size\r\n            const arr = this.realm.biomes.biomes.map((b) => {\r\n                if (b.size == Size.MEDIUM)\r\n                    return `${Lang.prependArticle(b.name)} in the ${b.direction}`;\r\n                else\r\n                    return `${Lang.prependArticle(b.size)} ${b.name} in the ${b.direction}`;\r\n            });\r\n            textEl.innerHTML += `${Lang.joinArrayWithAnd(arr)}.`;\r\n        }\r\n        el.append(textEl);\r\n        return el;\r\n    }\r\n}\r\n","import { BiomeType } from '../../../modules/geography/BiomesModule';\r\nimport Lang from '../../../util/Lang';\r\nimport Section from '../Section';\r\nexport default class LocationSection extends Section {\r\n    constructor(realm, name) {\r\n        super(realm, name);\r\n    }\r\n    render() {\r\n        const el = document.createElement('li');\r\n        // Title\r\n        const titleEl = document.createElement('h3');\r\n        titleEl.textContent = this.name;\r\n        el.appendChild(titleEl);\r\n        // Content\r\n        const textEl = document.createElement('p');\r\n        // \"Nordland is a very small free city located on the coast in the north-eastern part of the Holy Empire.\"\r\n        textEl.innerHTML = `${Lang.capitalize(Lang.readWord(this.realm.realmName.name))} is a ${this.realm.size.size} ${Lang.capitalize(this.realm.government.rank)} located ${this.realm.tags.includes(BiomeType.COAST) ? `on the coast ` : ``}in the ${this.realm.location.locationWithinParentEntity}ern part of the ${Lang.capitalize(this.realm.parentEntity.name)}.`;\r\n        el.append(textEl);\r\n        return el;\r\n    }\r\n}\r\n","import Lang from '../../../util/Lang';\r\nimport Section from '../Section';\r\nexport default class RiversSection extends Section {\r\n    constructor(realm, name) {\r\n        super(realm, name);\r\n    }\r\n    render() {\r\n        const el = document.createElement('li');\r\n        // Title\r\n        const titleEl = document.createElement('h3');\r\n        titleEl.textContent = this.name;\r\n        el.appendChild(titleEl);\r\n        // Content\r\n        const textEl = document.createElement('p');\r\n        // \"Two rivers pass through Nordland: the Holz and the Schwanau. Notable tributaries include the rivers Dunkler Holz, Stuten, and Schwan.\"\r\n        let text = '';\r\n        if (this.realm.rivers.rivers.length == 0) {\r\n            // No rivers\r\n            text = `No notable rivers pass through ${this.realm.name}.`;\r\n        }\r\n        else if (this.realm.rivers.rivers.length == 1) {\r\n            // One river\r\n            let r = this.realm.rivers.rivers[0];\r\n            text = `The main river that flows through ${this.realm.name} is the ${Lang.capitalize(Lang.readWord(r.name))}. `;\r\n            // Flows from...\r\n            text += `The ${Lang.capitalize(Lang.readWord(r.name))} `;\r\n            if (r.flowsFromMountains) {\r\n                text += `begins in the ${r.flowsFrom} mountains `;\r\n            }\r\n            else {\r\n                text += `enters ${this.realm.name} in the ${r.flowsFrom} `;\r\n            }\r\n            // Flows to...\r\n            if (r.flowsToCoast) {\r\n                text += `and forms an estuary on the ${r.flowsTo} coast. `;\r\n            }\r\n            else {\r\n                text += `and flows toward the ${r.flowsTo}.`;\r\n            }\r\n        }\r\n        else {\r\n            // More than one river\r\n            text = `${Lang.capitalize(Lang.wordFromNumber(this.realm.rivers.rivers.length))} rivers pass through ${this.realm.name}: ${Lang.joinArrayWithAnd(this.realm.rivers.rivers.map((r) => {\r\n                return `the ${Lang.capitalize(Lang.readWord(r.name))}`;\r\n            }), ', ', ' and ')}.`;\r\n        }\r\n        if (this.realm.rivers.tributaries.length > 0) {\r\n            text +=\r\n                ' Notable tributaries include the rivers ' +\r\n                    Lang.joinArrayWithAnd(this.realm.rivers.tributaries.map((t) => {\r\n                        if (t.prefix)\r\n                            return `${Lang.capitalize(t.prefix.text)} ${Lang.capitalize(Lang.readWord(t.name))}`;\r\n                        else\r\n                            return `${Lang.capitalize(Lang.readWord(t.name))}`;\r\n                    }), ', ', ' and the ') +\r\n                    '.';\r\n        }\r\n        textEl.innerHTML = text;\r\n        el.append(textEl);\r\n        return el;\r\n    }\r\n}\r\n","import Lang from '../../../util/Lang';\r\nimport Section from '../Section';\r\nexport default class BasicsSection extends Section {\r\n    constructor(realm, name) {\r\n        super(realm, name);\r\n    }\r\n    render() {\r\n        const el = document.createElement('li');\r\n        // Title\r\n        const titleEl = document.createElement('h3');\r\n        titleEl.textContent = this.name;\r\n        el.appendChild(titleEl);\r\n        // Content\r\n        const textEl = document.createElement('p');\r\n        // \"Nordland is an imperial principality.\"\r\n        textEl.innerHTML = `${this.realm.name} is ${Lang.prependArticle(Lang.capitalize(this.realm.parentEntity.government.adj))} ${Lang.capitalize(this.realm.government.rank)}.`;\r\n        el.append(textEl);\r\n        return el;\r\n    }\r\n}\r\n","import Section from '../Section';\r\nexport default class CoatOfArmsSection extends Section {\r\n    constructor(realm, name) {\r\n        super(realm, name);\r\n    }\r\n    render() {\r\n        const el = document.createElement('li');\r\n        el.classList.add('li-coatOfArms');\r\n        const artEl = document.createElement('div');\r\n        artEl.classList.add('coatOfArms');\r\n        this.realm.heraldry.ordinary.svg.forEach((svg) => {\r\n            // Draw layer\r\n            artEl.innerHTML += `<svg\r\n        xmlns=\"http://www.w3.org/2000/svg\" fill=\"${this.realm.heraldry.tinctures[svg.tinctureIndex].color}\" viewBox=\"0 0 12 12\">\r\n          <mask id=\"myMask\">\r\n            <path d=\"M 2 1 \r\n            L 2 7\r\n            c 0 6 8 6 8 0\r\n            V 1 H 2\" fill=\"white\" />\r\n          </mask>\r\n          <path d=\"${svg.path}\" mask=\"url(#myMask)\" />\r\n        </svg>`;\r\n        });\r\n        // Draw the charges\r\n        if (this.realm.heraldry.chargeLayout) {\r\n            let str = `<div class=\"charge-layout charge-layout-${this.realm.heraldry.chargeLayout.name}\">`;\r\n            for (let i = 0; i < this.realm.heraldry.chargeLayout.count; i++) {\r\n                str += `<i class=\"fa-solid fa-${this.realm.heraldry.charge.url} ${'fa-' + this.realm.heraldry.chargeLayout.size}\" style=\"color:${this.realm.heraldry.chargeTincture.color}\"></i>`;\r\n            }\r\n            str += `</div>`;\r\n            artEl.innerHTML += str;\r\n        }\r\n        el.appendChild(artEl);\r\n        return el;\r\n    }\r\n}\r\n","import Section from '../Section';\r\nexport default class HeraldrySection extends Section {\r\n    constructor(realm, name) {\r\n        super(realm, name);\r\n    }\r\n    render() {\r\n        const el = document.createElement('li');\r\n        // Title\r\n        const titleEl = document.createElement('h3');\r\n        titleEl.textContent = this.name;\r\n        el.appendChild(titleEl);\r\n        // Content\r\n        const textEl = document.createElement('p');\r\n        // Vars\r\n        const tincture1 = `<span class=\"tincture inline-icon\" style=\"background-color: ${this.realm.heraldry.tinctures[0].color}\"></span>${this.realm.heraldry.tinctures[0].name}`;\r\n        const tincture2 = `<span class=\"tincture inline-icon\" style=\"background-color: ${this.realm.heraldry.tinctures[1].color}\"></span>${this.realm.heraldry.tinctures[1].name}`;\r\n        // \"The design of Nordland's coat of arms resembles a centered, red chevron on a silver field. Three gold circles are evenly spaced in the corners of the design.\"\r\n        textEl.innerHTML += `The design of ${this.realm.name}'s coat of arms resembles ${eval(`\\`${this.realm.heraldry.ordinary.description}\\``)}.`;\r\n        if (this.realm.heraldry.chargeLayout) {\r\n            const chargeTincture = `<span class=\"tincture inline-icon\" style=\"background-color: ${this.realm.heraldry.chargeTincture.color}\"></span>${this.realm.heraldry.chargeTincture.name}`;\r\n            const chargeName = this.realm.heraldry.charge.name;\r\n            if (this.realm.heraldry.chargeLayout) {\r\n                textEl.innerHTML += ` ${eval(`\\`${this.realm.heraldry.chargeLayout.description}\\``)}`;\r\n            }\r\n        }\r\n        el.append(textEl);\r\n        return el;\r\n    }\r\n}\r\n","import Section from '../Section';\r\nexport default class SigilSection extends Section {\r\n    constructor(realm, name) {\r\n        super(realm, name);\r\n    }\r\n    render() {\r\n        const el = document.createElement('li');\r\n        // Title\r\n        const titleEl = document.createElement('h3');\r\n        titleEl.textContent = this.name;\r\n        el.appendChild(titleEl);\r\n        // Content\r\n        const textEl = document.createElement('p');\r\n        // \"The sigil of Nordland is a cross, which symbolizes piety.\"\r\n        textEl.innerHTML += `The sigil of ${this.realm.name} is a ${this.realm.heraldry.sigil.name}, and symbolizes ${this.realm.heraldry.sigil.meaning}.`;\r\n        el.append(textEl);\r\n        // <i class=\"fas fa-${this.realm.heraldry.sigil.icon}\"></i>\r\n        return el;\r\n    }\r\n}\r\n","import * as loremWords from './lorem-words.json';\r\nimport * as numberWords from './number-words.json';\r\nimport Rand from './Rand';\r\nexport default class Lang {\r\n    // Convert an instance of Word into a string\r\n    static readWord(word) {\r\n        return word.root.text + word.suffix.text;\r\n    }\r\n    // Returns 'a' or 'an' if str's first char is a consonant or a vowel\r\n    static prependArticle(str) {\r\n        return `${Lang.startsWithVowel(str) ? 'an' : 'a'} ${str}`;\r\n    }\r\n    // Returns true if the string ends with a given str\r\n    static endsWith(str, endingStr) {\r\n        const regex = new RegExp('.*' + endingStr + '$');\r\n        return regex.test(str);\r\n    }\r\n    // Returns true if the string starts with a vowel\r\n    static startsWithVowel(str) {\r\n        const regex = new RegExp('^[aeiou].*', 'i');\r\n        return regex.test(str.trim());\r\n    }\r\n    // Returns true if the string starts with a vowel\r\n    static endsWithVowel(str) {\r\n        const regex = new RegExp('.*[aeiou]$', 'i');\r\n        return regex.test(str.trim());\r\n    }\r\n    // Returns a string joining an array of at least two entries\r\n    // with commas and the word 'and' between the last two entries\r\n    static joinArrayWithAnd(arr, joiningString = ', ', lastJoiningString = ' and ') {\r\n        const last = arr.pop();\r\n        if (arr.length == 1) {\r\n            return arr[0] + lastJoiningString + last;\r\n        }\r\n        let str = arr.join(joiningString);\r\n        str += `, ${lastJoiningString} ${last}`;\r\n        return str;\r\n    }\r\n    // Capitalize first letter\r\n    static capitalize(str) {\r\n        const arr = str.split(' ');\r\n        str = arr.reduce((accumulator, s) => accumulator + ' ' + s.charAt(0).toUpperCase() + s.substring(1), '');\r\n        return str.trim();\r\n    }\r\n    // Returns any number lower than 20 as a word ('one', 'two', ... 'nineteen')\r\n    static wordFromNumber(n) {\r\n        return n < numberWords.length ? numberWords[n] : n.toString();\r\n    }\r\n    // Quick and dirty placeholder text\r\n    static lorem(max = 3) {\r\n        let str = '';\r\n        for (let i = 1; i <= max; i++) {\r\n            const words = Rand.between(3, 10);\r\n            let arr = [];\r\n            for (let j = 0; j < words; j++) {\r\n                arr.push(Rand.pick(loremWords));\r\n            }\r\n            str += [Lang.capitalize(Rand.pick(loremWords)), ...arr].join(' ') + '. ';\r\n        }\r\n        return str;\r\n    }\r\n}\r\n","import * as words from './seed-words.json';\r\nexport default class Rand {\r\n    static generateSeed() {\r\n        let arr = [];\r\n        for (let i = 0; i < 3; i++) {\r\n            // Don't use a seeded value to generate the seed\r\n            arr.push(words[Math.floor(Math.random() * words.length)]);\r\n        }\r\n        Rand.seed = arr.join('-');\r\n    }\r\n    static get seed() {\r\n        return this._seed;\r\n    }\r\n    static set seed(value) {\r\n        this._seed = value;\r\n        let h = 1779033703 ^ Rand.seed.length;\r\n        for (var i = 0; i < Rand.seed.length; i++) {\r\n            h = Math.imul(h ^ Rand.seed.charCodeAt(i), 3432918353);\r\n            h = (h << 13) | (h >>> 19);\r\n        }\r\n        Rand.m_w = (123456789 + h) & Rand.mask;\r\n        Rand.m_z = (987654321 - h) & Rand.mask;\r\n    }\r\n    static next() {\r\n        return Rand.between(0, 1);\r\n    }\r\n    static between(min, max, floor = false) {\r\n        Rand.m_z = (36969 * (Rand.m_z & 65535) + (Rand.m_z >> 16)) & Rand.mask;\r\n        Rand.m_w = (18000 * (Rand.m_w & 65535) + (Rand.m_w >> 16)) & Rand.mask;\r\n        let result = ((Rand.m_z << 16) + (Rand.m_w & 65535)) >>> 0;\r\n        result /= 4294967296;\r\n        result = result * (max - min) + min;\r\n        return floor ? Math.floor(result) : result;\r\n    }\r\n    // Returns an item from an array\r\n    static pick(arr) {\r\n        return arr[Rand.between(0, arr.length, true)];\r\n    }\r\n    // Returns an item from an array\r\n    // The weight value is determined using the accessor function\r\n    // randomWeightedValue<NamePart>(nameParts, item => item.asRoot)\r\n    static weightedPick(arr, accessor, log = false) {\r\n        if (log)\r\n            console.log(arr);\r\n        // Get the max weight\r\n        const max = arr.reduce((total, item) => {\r\n            return total + accessor(item);\r\n        }, 0);\r\n        // Calculate a random number on the scale of max\r\n        let weight = Rand.between(0, max);\r\n        // For each item in the array, decrement max by that item's weight\r\n        let result;\r\n        arr.some((item) => {\r\n            weight -= accessor(item);\r\n            result = item;\r\n            return weight < 0;\r\n        });\r\n        return result;\r\n    }\r\n}\r\nRand.m_w = 123456789;\r\nRand.m_z = 987654321;\r\nRand.mask = 4294967295;\r\n","import { BiomeType } from '../modules/geography/BiomesModule';\r\nimport Lang from './Lang';\r\nexport default class Util {\r\n    static download(name, text) {\r\n        var element = document.createElement('a');\r\n        element.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(text));\r\n        element.setAttribute('download', name);\r\n        element.style.display = 'none';\r\n        document.body.appendChild(element);\r\n        element.click();\r\n        document.body.removeChild(element);\r\n    }\r\n    static toggleDarkMode() {\r\n        Util.isDarkMode = !Util.isDarkMode;\r\n        localStorage.setItem('darkMode', JSON.stringify(Util.isDarkMode));\r\n        Util.isDarkMode ? Util.applyDarkMode() : Util.applyLightMode();\r\n    }\r\n    static applyDarkMode() {\r\n        const mode = [\r\n            { id: '--dark-text', value: '#f8f8f8' },\r\n            { id: '--dark-text-muted', value: 'rgba(248, 248, 248, 0.6)' },\r\n            { id: '--dark-text-very-muted', value: 'rgba(248, 248, 248, 0.1)' },\r\n            { id: '--dark-text-hidden', value: 'rgba(248, 248, 248, 0)' },\r\n            { id: '--light-text', value: '#444444' },\r\n            { id: '--light-text-muted', value: 'rgba(68, 68, 68, 0.6)' },\r\n            { id: '--light-text-very-muted', value: 'rgba(68, 68, 68, 0.1)' },\r\n            { id: '--light-text-hidden', value: 'rgba(68, 68, 68, 0)' },\r\n            { id: '--dark-background', value: '#f8f8f8' },\r\n            { id: '--dark-background-alt', value: 'rgba(248, 248, 248, 0.95)' },\r\n            { id: '--light-background', value: '#444444' },\r\n            { id: '--light-background-alt', value: 'rgba(68, 68, 68, 0.95)' }\r\n        ];\r\n        var root = document.querySelector(':root');\r\n        mode.forEach((m) => {\r\n            root.style.setProperty(m.id, m.value);\r\n        });\r\n    }\r\n    static applyLightMode() {\r\n        const mode = [\r\n            { id: '--dark-text', value: '#444444' },\r\n            { id: '--dark-text-muted', value: 'rgba(68, 68, 68, 0.6)' },\r\n            { id: '--dark-text-very-muted', value: 'rgba(68, 68, 68, 0.1)' },\r\n            { id: '--dark-text-hidden', value: 'rgba(68, 68, 68, 0)' },\r\n            { id: '--light-text', value: '#f8f8f8' },\r\n            { id: '--light-text-muted', value: 'rgba(248, 248, 248, 0.6)' },\r\n            { id: '--light-text-very-muted', value: 'rgba(248, 248, 248, 0.1)' },\r\n            { id: '--light-text-hidden', value: 'rgba(248, 248, 248, 0)' },\r\n            { id: '--dark-background', value: '#444444' },\r\n            { id: '--dark-background-alt', value: 'rgba(68, 68, 68, 0.95)' },\r\n            { id: '--light-background', value: '#f8f8f8' },\r\n            { id: '--light-background-alt', value: 'rgba(248, 248, 248, 0.95)' }\r\n        ];\r\n        var root = document.querySelector(':root');\r\n        mode.forEach((m) => {\r\n            root.style.setProperty(m.id, m.value);\r\n        });\r\n    }\r\n    static arrayRemove(arr, elementToRemove) {\r\n        return arr.filter(function (element) {\r\n            return element != elementToRemove;\r\n        });\r\n    }\r\n    // Tweet a realm\r\n    static shareByTweet(realm) {\r\n        let tweet = `Explore ${Lang.capitalize(Lang.readWord(realm.realmName.name))}, a ${realm.size.size} ${Lang.capitalize(realm.government.rank)} located ${realm.tags.includes(BiomeType.COAST) ? `on the coast ` : ``}in the ${realm.location.locationWithinParentEntity}ern part of the ${Lang.capitalize(realm.parentEntity.name)}.`;\r\n        window.open('https://twitter.com/intent/tweet?url=' +\r\n            window.location.href +\r\n            '&text=' +\r\n            tweet, '_blank');\r\n    }\r\n}\r\nUtil.isDarkMode = false;\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","var getProto = Object.getPrototypeOf ? (obj) => (Object.getPrototypeOf(obj)) : (obj) => (obj.__proto__);\nvar leafPrototypes;\n// create a fake namespace object\n// mode & 1: value is a module id, require it\n// mode & 2: merge all properties of value into the ns\n// mode & 4: return value when already ns object\n// mode & 16: return value when it's Promise-like\n// mode & 8|1: behave like require\n__webpack_require__.t = function(value, mode) {\n\tif(mode & 1) value = this(value);\n\tif(mode & 8) return value;\n\tif(typeof value === 'object' && value) {\n\t\tif((mode & 4) && value.__esModule) return value;\n\t\tif((mode & 16) && typeof value.then === 'function') return value;\n\t}\n\tvar ns = Object.create(null);\n\t__webpack_require__.r(ns);\n\tvar def = {};\n\tleafPrototypes = leafPrototypes || [null, getProto({}), getProto([]), getProto(getProto)];\n\tfor(var current = mode & 2 && value; typeof current == 'object' && !~leafPrototypes.indexOf(current); current = getProto(current)) {\n\t\tObject.getOwnPropertyNames(current).forEach((key) => (def[key] = () => (value[key])));\n\t}\n\tdef['default'] = () => (value);\n\t__webpack_require__.d(ns, def);\n\treturn ns;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/**\r\n * Hint: Use 'npm run build' from console to compile + watch the TS code on save\r\n */\r\nimport RealmPageController from './controllers/RealmPageController';\r\nimport JSONPageController from './controllers/JSONPageController';\r\n// Determine the html file name\r\nconsole.log(window.location.href);\r\nconst arr = window.location.href.match(/(.*\\/)(\\w+)\\.html(.*)/);\r\nconsole.log(arr);\r\nconst file = arr && arr.length > 2 ? arr[2] : '';\r\nlet controller;\r\nswitch (file) {\r\n    case 'realm':\r\n        controller = new RealmPageController();\r\n        break;\r\n    case 'json':\r\n        controller = new JSONPageController();\r\n        break;\r\n    default:\r\n        // Error!\r\n        console.log('Error!');\r\n        break;\r\n}\r\n"],"names":[],"sourceRoot":""}