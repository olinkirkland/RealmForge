{"version":3,"file":"bundle.js","mappings":";;;;;;;;;;;;;;AAAe;AACf;AACA;AACA,2BAA2B,OAAO;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,sBAAsB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;AC1De;AACf;AACA;AACA,sDAAsD;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,qCAAqC;AACnD,cAAc,4DAA4D;AAC1E,cAAc,iEAAiE;AAC/E,cAAc,2DAA2D;AACzE,cAAc,sCAAsC;AACpD,cAAc,0DAA0D;AACxE,cAAc,+DAA+D;AAC7E,cAAc,yDAAyD;AACvE,cAAc,2CAA2C;AACzD,cAAc,iEAAiE;AAC/E,cAAc,4CAA4C;AAC1D,cAAc;AACd;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,cAAc,qCAAqC;AACnD,cAAc,yDAAyD;AACvE,cAAc,8DAA8D;AAC5E,cAAc,wDAAwD;AACtE,cAAc,sCAAsC;AACpD,cAAc,6DAA6D;AAC3E,cAAc,kEAAkE;AAChF,cAAc,4DAA4D;AAC1E,cAAc,2CAA2C;AACzD,cAAc,8DAA8D;AAC5E,cAAc,4CAA4C;AAC1D,cAAc;AACd;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC;AACxC;AACA,WAAW,MAAM,YAAY,EAAE,uBAAuB,EAAE,qBAAqB;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACxIe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;AChB8B;AACwB;AACvB;AACxB;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,8BAA8B;AAChB,6BAA6B,+CAAM;AAClD;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,kDAAS;AACnD;AACA;AACA;AACA;AACA;AACA,YAAY,kDAAS;AACrB;AACA,+BAA+B,oEAAe;AAC9C;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;ACnC+B;AACD;AACA;AACwB;AACE;AACjD;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,8BAA8B;AAChB,2BAA2B,+CAAM;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,qDAAY;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,wDAAY;AACjC;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,wDAAY;AACjC;AACA;AACA;AACA;AACA,mDAAmD,4DAAgB;AACnE;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,gDAAgD,8DAAS;AACzD;AACA;AACA,4BAA4B,qDAAY;AACxC;AACA,4BAA4B,kDAAS;AACrC,kCAAkC,yDAAgB;AAClD,iCAAiC,kDAAS;AAC1C,kCAAkC,yDAAgB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;ACvE+B;AACD;AACA;AACwB;AACM;AACrD;AACP;AACA;AACA;AACA;AACA,CAAC,kCAAkC;AAC5B;AACP;AACA;AACA;AACA,CAAC,4BAA4B;AACd,4BAA4B,+CAAM;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qEAAqE,oEAAe;AACpF;AACA,gBAAgB,kDAAS;AACzB;AACA,0EAA0E,oEAAe;AACzF;AACA,gBAAgB,kDAAS;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,kDAAS;AACrC;AACA;AACA;AACA,4DAA4D,6DAAM,0BAA0B,6DAAM;AAClG,4DAA4D,6DAAM,0BAA0B,6DAAM;AAClG;AACA;AACA;AACA,wBAAwB,OAAO;AAC/B,8BAA8B,kDAAS;AACvC;AACA,yBAAyB,yDAAgB;AACzC;AACA;AACA,gBAAgB,kDAAS;AACzB;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;AC/D8B;AACC;AAC2C;AAC3D,iCAAiC,+CAAM;AACtD;AACA;AACA;AACA;AACA,yBAAyB,kDAAS,CAAC,0DAAS;AAC5C,yBAAyB,kDAAS,CAAC,2DAAU;AAC7C,0BAA0B,kDAAS,CAAC,4DAAW;AAC/C;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;ACf8B;AACA;AACwC;AACvC;AACY;AACA;AACU;AACtC,2BAA2B,+CAAM;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,wDAAY;AAC7B,6BAA6B,qDAAY;AACzC;AACA,iBAAiB,wDAAY;AAC7B,6BAA6B,qDAAY;AACzC;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,YAAY;AACvC,wBAAwB,gBAAgB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA,0EAA0E,8DAAmB;AAC7F,sEAAsE,0DAAe;AACrF;AACA,gDAAgD,8DAAS,gBAAgB,mFAAkC;AAC3G;AACA;AACA,qCAAqC,kDAAS;AAC9C;AACA,cAAc,kDAAS;AACvB;AACA,QAAQ,yDAAgB;AACxB;AACA;AACA,cAAc,kDAAS;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,2DAAY;AACrC;AACA,4BAA4B,8DAAe;AAC3C,iBAAiB;AACjB;AACA;;;;;;;;;;;;;;;;;;ACrE+B;AACD;AACvB;AACP;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,oBAAoB;AACN,yBAAyB,+CAAM;AAC9C;AACA;AACA;AACA;AACA,oBAAoB,kDAAS;AAC7B;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;ACrByD;AACM;AACU;AACV;AACF;AACA;AAC9C;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,qEAAU;AAClC,4BAA4B,uEAAc;AAC1C,gCAAgC,6EAAkB;AAClD,2BAA2B,wEAAa;AACxC,0BAA0B,uEAAY;AACtC,0BAA0B,uEAAY;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,UAAU;AAC1C,wBAAwB,UAAU,KAAK,OAAO;AAC9C;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UC5CA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;ACN0B;AACQ;AAClC,kDAAS;AACT;AACA,qBAAqB,kDAAS,CAAC;AAC/B,uEAA8B;AAC9B,gBAAgB,oDAAK;AACrB","sources":["webpack://ts-webpack/./src/Rand.ts","webpack://ts-webpack/./src/Util.ts","webpack://ts-webpack/./src/modules/Module.ts","webpack://ts-webpack/./src/modules/general/LocationModule.ts","webpack://ts-webpack/./src/modules/geography/BiomesModule.ts","webpack://ts-webpack/./src/modules/geography/ClimateModule.ts","webpack://ts-webpack/./src/modules/geography/ParentEntityModule.ts","webpack://ts-webpack/./src/modules/geography/RiversModule.ts","webpack://ts-webpack/./src/modules/geography/SizeModule.ts","webpack://ts-webpack/./src/realm/Realm.ts","webpack://ts-webpack/webpack/bootstrap","webpack://ts-webpack/webpack/runtime/define property getters","webpack://ts-webpack/webpack/runtime/hasOwnProperty shorthand","webpack://ts-webpack/webpack/runtime/make namespace object","webpack://ts-webpack/./src/index.ts"],"sourcesContent":["export default class Rand {\r\n    static generateSeed() {\r\n        // let arr: string[] = [];\r\n        // for (let i = 0; i < 3; i++) {\r\n        //   // Don't use a seeded value to generate the seed\r\n        //   arr.push(Data.words[Math.floor(Math.random() * Data.words.length)]);\r\n        // }\r\n        // Rand.seed = arr.join('-');\r\n        // Rand.seedRandomNumberGenerator();\r\n    }\r\n    static seedRandomNumberGenerator() {\r\n        let h = 1779033703 ^ Rand.seed.length;\r\n        for (var i = 0; i < Rand.seed.length; i++) {\r\n            h = Math.imul(h ^ Rand.seed.charCodeAt(i), 3432918353);\r\n            h = (h << 13) | (h >>> 19);\r\n        }\r\n        Rand.m_w = (123456789 + h) & Rand.mask;\r\n        Rand.m_z = (987654321 - h) & Rand.mask;\r\n    }\r\n    static next() {\r\n        return this.between(0, 1);\r\n    }\r\n    static between(min, max, floor = false) {\r\n        Rand.m_z = (36969 * (Rand.m_z & 65535) + (Rand.m_z >> 16)) & Rand.mask;\r\n        Rand.m_w = (18000 * (Rand.m_w & 65535) + (Rand.m_w >> 16)) & Rand.mask;\r\n        let result = ((Rand.m_z << 16) + (Rand.m_w & 65535)) >>> 0;\r\n        result /= 4294967296;\r\n        result = result * (max - min) + min;\r\n        return floor ? Math.floor(result) : result;\r\n    }\r\n    // Returns an item from an array\r\n    static pick(arr) {\r\n        return arr[Rand.between(0, arr.length, true)];\r\n    }\r\n    // Returns an item from an array\r\n    // The weight value is determined using the accessor function\r\n    // randomWeightedValue<NamePart>(nameParts, item => item.asRoot)\r\n    static weightedPick(arr, accessor, log = false) {\r\n        if (log)\r\n            console.log(arr);\r\n        // Get the max weight\r\n        const max = arr.reduce((total, item) => {\r\n            return total + accessor(item);\r\n        }, 0);\r\n        // Calculate a random number on the scale of max\r\n        let weight = Rand.between(0, max);\r\n        // For each item in the array, decrement max by that item's weight\r\n        let result;\r\n        arr.some((item) => {\r\n            weight -= accessor(item);\r\n            result = item;\r\n            return weight < 0;\r\n        });\r\n        return result;\r\n    }\r\n}\r\nRand.m_w = 123456789;\r\nRand.m_z = 987654321;\r\nRand.mask = 4294967295;\r\n","export default class Util {\r\n    static download(name, text) {\r\n        var element = document.createElement('a');\r\n        element.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(text));\r\n        element.setAttribute('download', name);\r\n        element.style.display = 'none';\r\n        document.body.appendChild(element);\r\n        element.click();\r\n        document.body.removeChild(element);\r\n    }\r\n    static toggleDarkMode() {\r\n        Util.isDarkMode = !Util.isDarkMode;\r\n        localStorage.setItem('darkMode', JSON.stringify(Util.isDarkMode));\r\n        Util.isDarkMode ? Util.applyDarkMode() : Util.applyLightMode();\r\n    }\r\n    static applyDarkMode() {\r\n        console.log('Apply dark mode');\r\n        const mode = [\r\n            { id: '--dark-text', value: '#f8f8f8' },\r\n            { id: '--dark-text-muted', value: 'rgba(248, 248, 248, 0.6)' },\r\n            { id: '--dark-text-very-muted', value: 'rgba(248, 248, 248, 0.1)' },\r\n            { id: '--dark-text-hidden', value: 'rgba(248, 248, 248, 0)' },\r\n            { id: '--light-text', value: '#444444' },\r\n            { id: '--light-text-muted', value: 'rgba(68, 68, 68, 0.6)' },\r\n            { id: '--light-text-very-muted', value: 'rgba(68, 68, 68, 0.1)' },\r\n            { id: '--light-text-hidden', value: 'rgba(68, 68, 68, 0)' },\r\n            { id: '--dark-background', value: '#f8f8f8' },\r\n            { id: '--dark-background-alt', value: 'rgba(248, 248, 248, 0.95)' },\r\n            { id: '--light-background', value: '#444444' },\r\n            { id: '--light-background-alt', value: 'rgba(68, 68, 68, 0.95)' }\r\n        ];\r\n        var root = document.querySelector(':root');\r\n        mode.forEach((m) => {\r\n            root.style.setProperty(m.id, m.value);\r\n        });\r\n    }\r\n    static applyLightMode() {\r\n        console.log('Apply light mode');\r\n        const mode = [\r\n            { id: '--dark-text', value: '#444444' },\r\n            { id: '--dark-text-muted', value: 'rgba(68, 68, 68, 0.6)' },\r\n            { id: '--dark-text-very-muted', value: 'rgba(68, 68, 68, 0.1)' },\r\n            { id: '--dark-text-hidden', value: 'rgba(68, 68, 68, 0)' },\r\n            { id: '--light-text', value: '#f8f8f8' },\r\n            { id: '--light-text-muted', value: 'rgba(248, 248, 248, 0.6)' },\r\n            { id: '--light-text-very-muted', value: 'rgba(248, 248, 248, 0.1)' },\r\n            { id: '--light-text-hidden', value: 'rgba(248, 248, 248, 0)' },\r\n            { id: '--dark-background', value: '#444444' },\r\n            { id: '--dark-background-alt', value: 'rgba(68, 68, 68, 0.95)' },\r\n            { id: '--light-background', value: '#f8f8f8' },\r\n            { id: '--light-background-alt', value: 'rgba(248, 248, 248, 0.95)' }\r\n        ];\r\n        var root = document.querySelector(':root');\r\n        mode.forEach((m) => {\r\n            root.style.setProperty(m.id, m.value);\r\n        });\r\n    }\r\n    static arrayRemove(arr, elementToRemove) {\r\n        return arr.filter(function (element) {\r\n            return element != elementToRemove;\r\n        });\r\n    }\r\n    // Returns 'a' or 'an' if str's first char is a consonant or a vowel\r\n    static aOrAn(str) {\r\n        return Util.startsWithVowel(str) ? 'an' : 'a';\r\n    }\r\n    // Returns true if the string ends with a given str\r\n    static endsWith(str, endingStr) {\r\n        const regex = new RegExp('.*' + endingStr + '$');\r\n        return regex.test(str);\r\n    }\r\n    // Returns true if the string starts with a vowel\r\n    static startsWithVowel(str) {\r\n        const regex = new RegExp('^[aeiou].*', 'i');\r\n        return regex.test(str);\r\n    }\r\n    // Returns true if the string starts with a vowel\r\n    static endsWithVowel(str) {\r\n        const regex = new RegExp('.*[aeiou]$', 'i');\r\n        return regex.test(str);\r\n    }\r\n    // Returns a string joining an array of at least two entries\r\n    // with commas and the word 'and' between the last two entries\r\n    static joinArrayWithAnd(arr) {\r\n        const last = arr.pop();\r\n        if (arr.length == 1) {\r\n            return arr[0] + ' and ' + last;\r\n        }\r\n        let str = arr.join(', ');\r\n        str += ', and ' + last;\r\n        return str;\r\n    }\r\n    // Tweet a realm\r\n    // static shareByTweet(realm: Realm) {\r\n    //   let tweet: string = `Explore ${Util.capitalize(\r\n    //     Util.readWord(realm.realmName)\r\n    //   )}, a ${realm.size} ${realm.parentEntityAdj} ${realm.governmentRank}.`;\r\n    //   window.open(\r\n    //     'https://twitter.com/intent/tweet?url=' +\r\n    //       window.location.href +\r\n    //       '&text=' +\r\n    //       tweet,\r\n    //     '_blank'\r\n    //   );\r\n    // }\r\n    // Capitalize first letter\r\n    static capitalize(str) {\r\n        return str.charAt(0).toUpperCase() + str.substring(1);\r\n    }\r\n    // Returns any number lower than 20 as a word ('one', 'two', ... 'nineteen')\r\n    static wordFromNumber(n) {\r\n        const words = [\r\n            'zero',\r\n            'one',\r\n            'two',\r\n            'three',\r\n            'four',\r\n            'five',\r\n            'six',\r\n            'seven',\r\n            'eight',\r\n            'nine',\r\n            'ten',\r\n            'eleven',\r\n            'twelve',\r\n            'thirteen',\r\n            'fourteen',\r\n            'fifteen',\r\n            'sixteen',\r\n            'seventeen',\r\n            'eighteen',\r\n            'nineteen'\r\n        ];\r\n        return n < words.length ? words[n] : n.toString();\r\n    }\r\n}\r\nUtil.isDarkMode = false;\r\n","export default class Module {\r\n    constructor(realm) {\r\n        this._realm = realm;\r\n        this.run();\r\n    }\r\n    run() { }\r\n}\r\n// Module child class template\r\n// import Module from '../Module';\r\n// import Realm from '../../realm/Realm';\r\n// export default class xModule extends Module {\r\n//   constructor(realm: Realm) {\r\n//     super(realm);\r\n//   }\r\n//   protected run() {\r\n//   }\r\n// }\r\n","import Rand from '../../Rand';\r\nimport { BiomeType } from '../geography/BiomesModule';\r\nimport Module from '../Module';\r\nexport var Direction;\r\n(function (Direction) {\r\n    Direction[\"NORTH\"] = \"north\";\r\n    Direction[\"NORTH_EAST\"] = \"north-east\";\r\n    Direction[\"EAST\"] = \"east\";\r\n    Direction[\"SOUTH_EAST\"] = \"south-east\";\r\n    Direction[\"SOUTH\"] = \"south\";\r\n    Direction[\"SOUTH_WEST\"] = \"south-west\";\r\n    Direction[\"WEST\"] = \"west\";\r\n    Direction[\"NORTH_WEST\"] = \"north-west\";\r\n})(Direction || (Direction = {}));\r\nexport default class LocationModule extends Module {\r\n    constructor(realm) {\r\n        super(realm);\r\n        this.locationWithinParentEntity = Direction.NORTH;\r\n        this.directionToCoast = null;\r\n    }\r\n    run() {\r\n        this.locationWithinParentEntity = Rand.pick(Object.values(Direction));\r\n        // Add direction tags south-west => south, west\r\n        this.locationWithinParentEntity\r\n            .split('-')\r\n            .forEach((l) => this._realm.addTag(l));\r\n        // 40% chance to be coastal\r\n        if (Rand.next() < 0.4) {\r\n            this.directionToCoast = this.locationWithinParentEntity;\r\n            this._realm.addTag(BiomeType.COAST);\r\n        }\r\n    }\r\n    static isCardinalDirection(direction) {\r\n        return !direction.includes('-');\r\n    }\r\n}\r\n","import Module from '../Module';\r\nimport Rand from '../../Rand';\r\nimport Util from '../../Util';\r\nimport { Direction } from '../general/LocationModule';\r\nimport { Humidity, Temperature } from './ClimateModule';\r\nexport var BiomeType;\r\n(function (BiomeType) {\r\n    BiomeType[\"GRASSLAND\"] = \"grassland\";\r\n    BiomeType[\"TUNDRA\"] = \"tundra\";\r\n    BiomeType[\"BOREAL_FOREST\"] = \"borealForest\";\r\n    BiomeType[\"TEMPERATE_FOREST\"] = \"temperateForest\";\r\n    BiomeType[\"MOUNTAINS\"] = \"mountains\";\r\n    BiomeType[\"COAST\"] = \"coast\";\r\n})(BiomeType || (BiomeType = {}));\r\nexport default class BiomesModule extends Module {\r\n    constructor(realm) {\r\n        super(realm);\r\n    }\r\n    run() {\r\n        this.biomes = [];\r\n        // Add a coast biome\r\n        let remainingSize = this._realm.size.sizeIndex + 1;\r\n        if (this._realm.tags.includes(BiomeType.COAST)) {\r\n            const coastBiome = {\r\n                type: BiomeType.COAST,\r\n                size: Rand.between(1, remainingSize, true),\r\n                direction: this._realm.location.directionToCoast\r\n            };\r\n        }\r\n        // Limit available biome types\r\n        let availableBiomeTypes = Object.values(BiomeType).filter((biomeType) => {\r\n            if (biomeType == BiomeType.COAST)\r\n                return false;\r\n            switch (this._realm.climate.humidity) {\r\n                case Humidity.DRY:\r\n                    // Dry? Remove boreal-forest and temperate-forest\r\n                    return ![\r\n                        BiomeType.BOREAL_FOREST,\r\n                        BiomeType.TEMPERATE_FOREST\r\n                    ].includes(biomeType);\r\n                    break;\r\n                case Humidity.WET:\r\n                    // Wet? Remove grassland and tundra\r\n                    return ![BiomeType.GRASSLAND, BiomeType.TUNDRA].includes(biomeType);\r\n                    break;\r\n            }\r\n            if (this._realm.climate.temperature == Temperature.WARM) {\r\n                // Warm? Remove boreal-forest and tundra\r\n                return ![BiomeType.BOREAL_FOREST, BiomeType.TUNDRA].includes(biomeType);\r\n            }\r\n            return true;\r\n        });\r\n        // Cannot be a combined direction like north-east or south-west, must be one of the four cardinal directions or 'middle'\r\n        let availableDirections = Object.values(Direction).filter((d) => d.split('-').length == 1);\r\n        // Create some number of biomes\r\n        while (remainingSize > 0 && availableBiomeTypes.length > 0) {\r\n            let biomeSize = Rand.between(1, remainingSize, true);\r\n            remainingSize -= biomeSize;\r\n            let biomeType = Rand.pick(availableBiomeTypes);\r\n            availableBiomeTypes = Util.arrayRemove(availableBiomeTypes, biomeType);\r\n            let biomeDirection = Rand.pick(availableDirections);\r\n            availableDirections = Util.arrayRemove(availableDirections, biomeDirection);\r\n            const biome = {\r\n                type: biomeType,\r\n                size: biomeSize,\r\n                direction: biomeDirection\r\n            };\r\n            this.biomes.push(biome);\r\n            this._realm.addTag(biomeType);\r\n        }\r\n    }\r\n}\r\n","import Module from '../Module';\r\nimport Rand from '../../Rand';\r\nimport Util from '../../Util';\r\nimport { Direction } from '../general/LocationModule';\r\nimport { summer, winter } from './season-descriptions.json';\r\nexport var Temperature;\r\n(function (Temperature) {\r\n    Temperature[\"COLD\"] = \"cold\";\r\n    Temperature[\"TEMPERATE\"] = \"temperate\";\r\n    Temperature[\"WARM\"] = \"warm\";\r\n})(Temperature || (Temperature = {}));\r\nexport var Humidity;\r\n(function (Humidity) {\r\n    Humidity[\"WET\"] = \"wet\";\r\n    Humidity[\"DRY\"] = \"dry\";\r\n})(Humidity || (Humidity = {}));\r\nexport default class ClimateModule extends Module {\r\n    constructor(realm) {\r\n        super(realm);\r\n        this.summerAdjectives = [];\r\n        this.winterAdjectives = [];\r\n    }\r\n    run() {\r\n        // Temperature: Default is TEMPERATE\r\n        // If location is in the north, 60% chance COLD\r\n        // If location is in the south, 60% chance WARM\r\n        if (this._realm.location.locationWithinParentEntity.includes(Direction.NORTH)) {\r\n            this.temperature =\r\n                Rand.next() < 0.6 ? Temperature.COLD : Temperature.TEMPERATE;\r\n        }\r\n        else if (this._realm.location.locationWithinParentEntity.includes(Direction.SOUTH)) {\r\n            this.temperature =\r\n                Rand.next() < 0.6 ? Temperature.WARM : Temperature.TEMPERATE;\r\n        }\r\n        else {\r\n            this.temperature = Temperature.TEMPERATE;\r\n        }\r\n        this._realm.addTag(this.temperature);\r\n        // Humidity\r\n        if (this._realm.tags.includes('coast')) {\r\n            this.humidity = Humidity.WET;\r\n        }\r\n        else {\r\n            this.humidity = Rand.pick(Object.values(Humidity));\r\n        }\r\n        this._realm.addTag(this.humidity);\r\n        // Choose words to describe summer and winter\r\n        this.summerAdjectives = this.chooseSeasonAdjectives(summer[this.temperature].concat(summer[this.humidity]));\r\n        this.winterAdjectives = this.chooseSeasonAdjectives(winter[this.temperature].concat(winter[this.humidity]));\r\n    }\r\n    chooseSeasonAdjectives(adjectives) {\r\n        let arr = [];\r\n        for (let i = 0; i < 2; i++) {\r\n            const adjective = Rand.pick(adjectives);\r\n            arr.push(adjective);\r\n            adjectives = Util.arrayRemove(adjectives, adjective);\r\n            //  If the word is longer than 6 letters, step out of the loop\r\n            //  Otherwise, 50% chance to step out of the loop\r\n            if (Rand.next() < 0.5 || adjective.length > 6)\r\n                break;\r\n        }\r\n        return arr;\r\n    }\r\n}\r\n","import Rand from '../../Rand';\r\nimport Module from '../Module';\r\nimport { adjectives, governments, templates } from './parent-entity.json';\r\nexport default class ParentEntityModule extends Module {\r\n    constructor(realm) {\r\n        super(realm);\r\n    }\r\n    run() {\r\n        const template = Rand.pick(templates);\r\n        this.adjective = Rand.pick(adjectives);\r\n        this.government = Rand.pick(governments);\r\n        const adjective = this.adjective;\r\n        const government = this.government.noun;\r\n        this.name = eval(template);\r\n    }\r\n}\r\n","import Rand from '../../Rand';\r\nimport Util from '../../Util';\r\nimport LocationModule, { Direction } from '../general/LocationModule';\r\nimport Module from '../Module';\r\nimport { BiomeType } from './BiomesModule';\r\nimport { Humidity } from './ClimateModule';\r\nimport { roots, suffixes } from './river-names.json';\r\nexport default class RiversModule extends Module {\r\n    constructor(realm) {\r\n        super(realm);\r\n    }\r\n    run() {\r\n        this.rivers = [];\r\n        // Pick a number of rivers\r\n        let riverCount = 0;\r\n        switch (this._realm.climate.humidity) {\r\n            case Humidity.DRY:\r\n                riverCount = Rand.between(0, 2, true);\r\n                break;\r\n            case Humidity.WET:\r\n                riverCount = Rand.between(2, 4, true);\r\n        }\r\n        // For small realms, there should only be one river\r\n        if (this._realm.size.sizeIndex < 2) {\r\n            riverCount = 1;\r\n        }\r\n        // Add rivers\r\n        console.log(`Add ${riverCount} rivers`);\r\n        for (let i = 0; i < riverCount; i++) {\r\n            this.addRiver();\r\n        }\r\n    }\r\n    addRiver() {\r\n        // Determine the directions (to and from) the river will flow\r\n        // Rivers tend to flow from mountains towards coasts, so factor this in if those biomes are present\r\n        const mountains = this._realm.biomes.biomes.find((b) => b.type == BiomeType.MOUNTAINS);\r\n        const coast = this._realm.biomes.biomes.find((b) => b.type == BiomeType.COAST);\r\n        // Only use cardinal directions\r\n        let availableDirections = Object.values(Direction).filter((d) => LocationModule.isCardinalDirection(d) &&\r\n            (!coast || d != coast.direction) &&\r\n            (!mountains || d != mountains.direction));\r\n        let flowsFrom = mountains && Rand.next() < 0.8\r\n            ? mountains.direction\r\n            : Rand.pick(availableDirections);\r\n        // Rivers can't flow to the same place they're flowing from\r\n        Util.arrayRemove(availableDirections, flowsFrom);\r\n        let flowsTo = coast\r\n            ? coast.direction\r\n            : Rand.pick(availableDirections);\r\n        const riverName = this.getRiverName();\r\n        let river = {\r\n            name: riverName,\r\n            flowsTo: flowsTo,\r\n            flowsFrom: flowsFrom,\r\n            flowsToCoast: coast,\r\n            flowsFromMountains: mountains,\r\n            tributaries: [],\r\n            prefix: undefined,\r\n            stem: undefined\r\n        };\r\n        console.log(river);\r\n    }\r\n    getRiverName() {\r\n        // Roots cannot be used by an existing river\r\n        let validRoots = roots.filter((p) => this.rivers.every((r) => r.name.root.text != p.text) &&\r\n            this._realm.evaluateCondition(p.condition));\r\n        let validSuffixes = suffixes.filter((p) => this._realm.evaluateCondition(p.condition));\r\n        return { root: validRoots[0], suffix: validSuffixes[0] };\r\n    }\r\n}\r\n","import Module from '../Module';\r\nimport Rand from '../../Rand';\r\nexport var Size;\r\n(function (Size) {\r\n    Size[\"VERY_SMALL\"] = \"very small\";\r\n    Size[\"SMALL\"] = \"small\";\r\n    Size[\"MEDIUM\"] = \"medium\";\r\n    Size[\"LARGE\"] = \"large\";\r\n    Size[\"VERY_LARGE\"] = \"very large\";\r\n})(Size || (Size = {}));\r\nexport default class SizeModule extends Module {\r\n    constructor(realm) {\r\n        super(realm);\r\n    }\r\n    run() {\r\n        this.size = Rand.pick(Object.values(Size));\r\n        this._realm.addTag(this.size == Size.VERY_SMALL ? 'city' : 'region');\r\n    }\r\n    get sizeIndex() {\r\n        return Object.values(Size).indexOf(this.size);\r\n    }\r\n}\r\n","import SizeModule from '../modules/geography/SizeModule';\r\nimport LocationModule from '../modules/general/LocationModule';\r\nimport ParentEntityModule from '../modules/geography/ParentEntityModule';\r\nimport ClimateModule from '../modules/geography/ClimateModule';\r\nimport BiomesModule from '../modules/geography/BiomesModule';\r\nimport RiversModule from '../modules/geography/RiversModule';\r\nexport default class Realm {\r\n    constructor() {\r\n        // public heraldry!: HeraldryModule;\r\n        // public government!: GovernmentModule;\r\n        // Tags\r\n        this._tags = [];\r\n        this.runModuleSequence();\r\n    }\r\n    runModuleSequence() {\r\n        console.log(' === Running Module Sequence === ');\r\n        this.size = new SizeModule(this);\r\n        this.location = new LocationModule(this);\r\n        this.parentEntity = new ParentEntityModule(this);\r\n        this.climate = new ClimateModule(this);\r\n        this.biomes = new BiomesModule(this);\r\n        this.rivers = new RiversModule(this);\r\n    }\r\n    addTag(tag) {\r\n        this._tags.push(tag);\r\n    }\r\n    get tags() {\r\n        return this._tags;\r\n    }\r\n    evaluateCondition(condition) {\r\n        if (condition == '')\r\n            return true;\r\n        let u = {};\r\n        this.tags.forEach((t) => (u[t] = true));\r\n        return new ConditionEvaluator().run(condition, u);\r\n    }\r\n}\r\nclass ConditionEvaluator {\r\n    constructor() { }\r\n    run(condition, t) {\r\n        const result = eval(`(${condition})`) ? true : false;\r\n        console.log(`(${condition}): ${result}`);\r\n        return result;\r\n    }\r\n}\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import Rand from './Rand';\r\nimport Realm from './realm/Realm';\r\nRand.seed = Math.floor(Math.random() * 999).toString();\r\n// Rand.seed = '490';\r\nconsole.log(`Seed: ${Rand.seed}`);\r\nRand.seedRandomNumberGenerator();\r\nlet realm = new Realm();\r\nconsole.log(realm);\r\n"],"names":[],"sourceRoot":""}