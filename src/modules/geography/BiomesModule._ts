import { BiomeType, Data, Direction } from '../../Data._ts';
import { Realm } from '../../realm/Realm';
import Util from '../../Util';
import { SizeModule } from './SizeModule';

export type Biome = {
  type: BiomeType;
  size: string;
  direction: Direction;
};

export class BiomesModule {
  static determine(realm: Realm) {
    // Limit available biome types
    let availableBiomeTypes: BiomeType[] = Data.biomeTypes.filter((biome) => {
      switch (realm.humidity) {
        case 'dry':
          // Dry? Remove boreal-forest and temperate-forest
          return !['boreal-forest', 'temperate-forest'].includes(biome);
          break;
        case 'wet':
          // Wet? Remove grassland and tundra
          return !['grassland', 'tundra'].includes(biome);
          break;
      }

      switch (realm.temperature) {
        case 'warm':
          // Warm? Remove boreal-forest and tundra
          return !['boreal-forest', 'tundra'].includes(biome);
          break;
      }

      return true;
    });

    // Add the primary biome
    let primaryBiomeType: BiomeType = Util.randomValue(availableBiomeTypes);

    // Reroll if mountains and larger than 1
    if (primaryBiomeType == 'mountain' && realm.sizeIndex > 1)
      primaryBiomeType = Util.randomValue(availableBiomeTypes);

    availableBiomeTypes = [
      ...availableBiomeTypes.filter((t) => t != primaryBiomeType)
    ];

    let availableSizeIndex: number = SizeModule.sizes.indexOf(realm.size) * 2;
    let sizeIndex: number = Math.floor(Util.rand() * availableSizeIndex);
    availableSizeIndex -= sizeIndex;
    let primaryBiome: Biome = {
      type: primaryBiomeType,
      size: SizeModule.sizes[Math.max(1, sizeIndex)],
      direction: Util.randomValue(Data.directions)
    };

    realm.tags.push(primaryBiome.type);
    realm.biomes.push(primaryBiome);

    if (Util.rand() < 0.6) {
      // Choose a direction that isn't the same direction as the primary Biome's direction
      // Also cannot be a combined direction like north-east or south-west, must be one of the four cardinal directions or 'middle'
      let secondaryDirection: { noun: string; adj: string };
      do {
        secondaryDirection = Util.randomValue(Data.directions);
      } while (
        secondaryDirection.noun == primaryBiome.direction.noun ||
        secondaryDirection.noun.includes('-')
      );

      let secondaryBiome: Biome = {
        type: Util.randomValue(availableBiomeTypes),
        size: SizeModule.sizes[
          Math.min(
            Math.floor(Util.rand() * availableSizeIndex),
            SizeModule.sizes.length - 1
          )
        ],
        direction: secondaryDirection
      };

      // Add a second biome
      realm.biomes.push(secondaryBiome);
      realm.tags.push(secondaryBiome.type);
    }
    return realm;
  }
}
