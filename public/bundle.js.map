{"version":3,"file":"bundle.js","mappings":";;;;;;;;;;;;;;AAAO;AACP;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACzB8B;AACA;AACvB;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,iDAAc;AACxC;AACA;AACA;AACA;AACA;AACA,kCAAkC,mDAAgB,CAAC,qEAAkC;AACrF;AACA;AACA,uCAAuC,mDAAgB,CAAC,qEAAkC;AAC1F;AACA;AACA;AACA;AACA,yBAAyB,iDAAc,CAAC,+DAA4B;AACpE,+BAA+B,+DAA4B;AAC3D;AACA;AACA,qBAAqB,mDAAgB,CAAC,oEAAiC;AACvE;AACA;AACA;AACA;AACA,2CAA2C,iDAAc,CAAC,kDAAe;AACzE;AACA,YAAY,kDAAe;AAC3B;AACA;AACA,oBAAoB,iDAAc,CAAC,6CAAU;AAC7C;AACA;AACA,8BAA8B,iDAAc,CAAC,uDAAoB;AACjE,2BAA2B,mDAAgB,CAAC,uDAAoB;AAChE;AACA;AACA,yBAAyB,iDAAc,CAAC,8CAAW;AACnD,yBAAyB,8CAAW;AACpC,4BAA4B,mDAAgB,CAAC,8CAAW;AACxD;AACA;AACA;AACA,8BAA8B,qDAAkB;AAChD;AACA;AACA,gBAAgB,mDAAgB;AAChC,gBAAgB,mDAAgB;AAChC;AACA;AACA;AACA,gBAAgB,mDAAgB;AAChC,gBAAgB,mDAAgB;AAChC;AACA;AACA,SAAS;AACT;AACA,gBAAgB,iDAAc;AAC9B;AACA,gBAAgB,iDAAc;AAC9B,QAAQ,mDAAgB;AACxB,iCAAiC,qDAAkB;AACnD;AACA;AACA;AACA;AACA,kBAAkB,6CAAU;AAC5B,uBAAuB,iDAAc,CAAC,kDAAe;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,iDAAc,CAAC,kDAAe;AACnE,cAAc;AACd;AACA;AACA,uBAAuB,iDAAc;AACrC,sBAAsB,6CAAU;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;AC3HO;AACP;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;UClBA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;;ACN8B;AACA;AACE;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAAU;AACV,gBAAgB,yCAAK;AACrB;AACA,CAAC;AACD;AACA;AACA;AACA;AACA,gBAAgB,yCAAK;AACrB;AACA;AACA;AACA;AACA;AACA,mHAAmH,wBAAwB;AAC3I;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,WAAW,mDAAgB,CAAC,8CAAW;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,6CAAU;AAC7B;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL","sources":["webpack://ts-webpack/./src/data.ts","webpack://ts-webpack/./src/realm.ts","webpack://ts-webpack/./src/util.ts","webpack://ts-webpack/webpack/bootstrap","webpack://ts-webpack/webpack/runtime/define property getters","webpack://ts-webpack/webpack/runtime/hasOwnProperty shorthand","webpack://ts-webpack/webpack/runtime/make namespace object","webpack://ts-webpack/./src/index.ts"],"sourcesContent":["export class Data {\r\n    static setup(callback) {\r\n        // Load names\r\n        fetch('./assets/data/content.json')\r\n            .then((response) => {\r\n            return response.json();\r\n        })\r\n            .then((data) => {\r\n            Data.parse(data);\r\n            callback();\r\n        });\r\n    }\r\n    static parse(u) {\r\n        Data.biomes = u.biomes;\r\n        Data.directions = u.directions;\r\n        Data.images = u.images;\r\n        Data.governmentRanks = u.governmentRanks;\r\n        Data.sigils = u.sigils;\r\n        Data.sizes = u.sizes;\r\n        Data.seasonDescriptors1 = u.seasons.descriptors1;\r\n        Data.seasonDescriptors2 = u.seasons.descriptors2;\r\n        Data.parentEntityDescriptorsBefore = u.parentEntities.descriptorsBefore;\r\n        Data.parentEntityDescriptorsAfter = u.parentEntities.descriptorsAfter;\r\n        Data.parentEntityGovernments = u.parentEntities.governments;\r\n    }\r\n}\r\n","import { Data } from './data';\r\nimport { Util } from './util';\r\nexport class Realm {\r\n    constructor() {\r\n        this.name = 'oldmarch';\r\n        this.adj = 'oldmarch';\r\n        this.capitalCityName = 'highbridge';\r\n        this.governmentRank = 'territory';\r\n        this.leaderTitle = 'lord';\r\n        this.parentEntityName = 'the empire';\r\n        this.parentEntityAdj = 'imperial';\r\n        this.directionWithinParentEntity = 'south';\r\n        this.directionAdjWithinParentEntity = 'south';\r\n        this.size = 'small';\r\n        this.climate = ['temperate'];\r\n        this.season = 'varied';\r\n        this.seasonSummer = ['long', 'harsh'];\r\n        this.seasonWinter = ['long', 'mild'];\r\n        this.biomes = [];\r\n        this.coastal = false;\r\n        this.sigilName = 'dove';\r\n        this.sigilIcon = 'dove';\r\n        this.sigilMeaning = 'peace';\r\n        this.determineParentEntity();\r\n        this.determineDirection();\r\n        this.determineSize();\r\n        this.determineGovernmentRank();\r\n        this.determineSigil();\r\n        // Choose geography and climate based on the direction\r\n        if (this.directionWithinParentEntity.includes('north')) {\r\n            this.climate = ['cold'];\r\n        }\r\n        else if (this.directionWithinParentEntity.includes('south')) {\r\n            this.climate = ['warm'];\r\n        }\r\n        else {\r\n            this.climate = ['temperate'];\r\n        }\r\n        this.climate.push(Util.randomKey(['wet', 'dry']));\r\n        this.determineBiomes();\r\n    }\r\n    determineParentEntity() {\r\n        let arr = ['the'];\r\n        if (Math.random() < 0.8) {\r\n            let firstDescriptor = Util.randomValue(Data.parentEntityDescriptorsBefore);\r\n            arr.push(firstDescriptor);\r\n            if (Math.random() < 0.2) {\r\n                let secondDescriptor = Util.randomValue(Data.parentEntityDescriptorsBefore);\r\n                if (secondDescriptor != firstDescriptor)\r\n                    arr.push(secondDescriptor);\r\n            }\r\n        }\r\n        let government = Util.randomKey(Data.parentEntityGovernments);\r\n        this.parentEntityAdj = Data.parentEntityGovernments[government];\r\n        arr.push(government);\r\n        if (Math.random() < 0.1) {\r\n            arr.push(Util.randomValue(Data.parentEntityDescriptorsAfter));\r\n        }\r\n        this.parentEntityName = arr.join(' ');\r\n    }\r\n    determineDirection() {\r\n        this.directionWithinParentEntity = Util.randomKey(Data.directions);\r\n        this.directionAdjWithinParentEntity =\r\n            Data.directions[this.directionWithinParentEntity];\r\n    }\r\n    determineSize() {\r\n        this.size = Util.randomKey(Data.sizes);\r\n    }\r\n    determineGovernmentRank() {\r\n        this.governmentRank = Util.randomKey(Data.governmentRanks);\r\n        this.leaderTitle = Util.randomValue(Data.governmentRanks);\r\n    }\r\n    determineSigil() {\r\n        this.sigilName = Util.randomKey(Data.sigils);\r\n        this.sigilIcon = Data.sigils[this.sigilName].icon;\r\n        this.sigilMeaning = Util.randomValue(Data.sigils[this.sigilName].meanings);\r\n    }\r\n    determineBiomes() {\r\n        // mountain | boreal-forest | temperate-forest | grassland | tundra\r\n        let availableBiomes = Data.biomes.filter((str) => {\r\n            // Dry? Remove boreal-forest and temperate-forest\r\n            if (this.climate.includes('dry')) {\r\n                Util.arrayRemove(availableBiomes, 'boreal-forest');\r\n                Util.arrayRemove(availableBiomes, 'temperate-forest');\r\n            }\r\n            // Wet? Remove grassland and tundra\r\n            if (this.climate.includes('wet')) {\r\n                Util.arrayRemove(availableBiomes, 'grassland');\r\n                Util.arrayRemove(availableBiomes, 'tundra');\r\n            }\r\n            return true;\r\n        });\r\n        // Add the primary biome, reroll once if mountains\r\n        let b = Util.randomKey(availableBiomes);\r\n        if (b == 'mountains')\r\n            b = Util.randomKey(availableBiomes);\r\n        Util.arrayRemove(availableBiomes, b);\r\n        let availableSizeIndex = Data.sizes.indexOf(this.size);\r\n        let sizeIndex = Math.floor(Math.random() * availableSizeIndex);\r\n        availableSizeIndex -= sizeIndex;\r\n        let primaryBiome = {\r\n            biome: b,\r\n            size: Data.sizes[sizeIndex],\r\n            direction: Util.randomKey(Data.directions)\r\n        };\r\n        this.biomes.push(primaryBiome);\r\n        if (Math.random() < 0.6) {\r\n            // Choose a direction that isn't the same direction as the primary Biome's direction\r\n            // Also cannot be a combined direction like north-east or south-west, must be one of the four cardinal directions or 'middle'\r\n            let secondaryDirection;\r\n            do {\r\n                secondaryDirection = Util.randomKey(Data.directions);\r\n            } while (secondaryDirection == primaryBiome.direction &&\r\n                secondaryDirection.includes('-'));\r\n            let secondaryBiome = {\r\n                biome: Util.randomKey(availableBiomes),\r\n                size: Data.sizes[Math.floor(Math.random() * availableSizeIndex)],\r\n                direction: secondaryDirection\r\n            };\r\n            // Add a second biome\r\n            this.biomes.push(secondaryBiome);\r\n        }\r\n    }\r\n}\r\n","export class Util {\r\n    static arrayRemove(arr, elementToRemove) {\r\n        return arr.filter(function (element) {\r\n            return element != elementToRemove;\r\n        });\r\n    }\r\n    static randomKey(u) {\r\n        let keys = Object.keys(u);\r\n        let k = keys[Math.floor(Math.random() * keys.length)];\r\n        return k;\r\n    }\r\n    static randomValue(u) {\r\n        return u[Util.randomKey(u)];\r\n    }\r\n    static aOrAn(str) {\r\n        const regex = new RegExp('^[aeiou].*', 'i');\r\n        return regex.test(str) ? 'an' : 'a';\r\n    }\r\n}\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { Util } from './util';\r\nimport { Data } from './data';\r\nimport { Realm } from './realm';\r\n/**\r\n * Hint: Use 'npm run build' from console to compile + watch the TS code on save\r\n */\r\n// Handle start button\r\nconst btnStart = document.getElementById('btnStart');\r\nbtnStart.addEventListener('click', start);\r\n// Load data\r\nData.setup(() => {\r\n    realm = new Realm();\r\n    updateView();\r\n});\r\n// Initialize variables\r\nlet realm;\r\n// Start the generation process\r\nfunction start() {\r\n    realm = new Realm();\r\n    updateView();\r\n}\r\nfunction updateView() {\r\n    // Choose a photo for the hero\r\n    const heroEl = document.getElementById('hero');\r\n    heroEl.setAttribute('style', `background-image: linear-gradient(rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0.5)), url(${determineHeroImageUrl()})`);\r\n    // Apply values to view\r\n    applyText('name', realm.name);\r\n    applyText('government-rank', realm.governmentRank);\r\n    applyText('parent-entity', realm.parentEntityName);\r\n    applyText('direction-within-parent-entity', realm.directionAdjWithinParentEntity);\r\n    applyText('capital-city', realm.capitalCityName);\r\n    applyText('sigil-name', realm.sigilName);\r\n    applyText('sigil-meaning', realm.sigilMeaning);\r\n    realm.biomes.forEach((biome) => {\r\n    });\r\n    applyIcon('sigil', realm.sigilIcon);\r\n    // Change dice icon\r\n    const dice = ['one', 'two', 'three', 'four', 'five', 'six'];\r\n    const iconEl = document.querySelector('#btnStart > i');\r\n    dice.forEach((str) => {\r\n        iconEl.classList.remove('fa-dice-' + str);\r\n    });\r\n    iconEl.classList.add('fa-dice-' + dice[Math.floor(Math.random() * dice.length)]);\r\n}\r\nfunction determineHeroImageUrl() {\r\n    // Todo use realm information to determine the image\r\n    return Util.randomValue(Data.images);\r\n}\r\nfunction applyText(query, text) {\r\n    const els = document.querySelectorAll('span.' + query);\r\n    els.forEach((node) => {\r\n        const el = node;\r\n        el.classList.add('keyword');\r\n        if (el.classList.contains('prepend-article'))\r\n            text = Util.aOrAn(text) + ' ' + text;\r\n        el.textContent = text;\r\n    });\r\n}\r\nfunction applyIcon(query, icon) {\r\n    const els = document.querySelectorAll('i.' + query);\r\n    els.forEach((node) => {\r\n        const el = node;\r\n        // Remove the previous icon\r\n        el.classList.forEach((className) => {\r\n            if (className.includes('fa-') && className !== 'fa-2x') {\r\n                el.classList.remove(className);\r\n            }\r\n        });\r\n        el.classList.add('fa-' + icon);\r\n    });\r\n}\r\n"],"names":[],"sourceRoot":""}